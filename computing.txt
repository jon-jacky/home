
Computing technology, history, culture.

Begun November 2016.
Successor to http://jon-jacky.github.io/home/links.html, Spring 2001 -- July 2017

Companion page on design, typography, and graphics:
https://github.com/jon-jacky/home/blob/gh-pages/design.md

Companion page, a commonplace book:
https://github.com/jon-jacky/home/blob/gh-pages/commonplace.md

24 Dec 2020

-  https://news.ycombinator.com/item?id=21396662 - Oberon Operating System

   *eterps* writes: "What I like about Oberon's module system is that
   there is no distinction between a library and an app or command.

   In Oberon an 'executable' has 1 or more commands, somewhat similar to
   how git has more commands like pull, push & commit.

   But everything is reusable you don't need a libgit at some point if you
   need support for it in another application. Neither do you need to
   invoke a command in a process and capture its output.

   In Oberon git and libgit would be the same thing. Everything you
   execute as a command is directly reusable as native functional calls
   from other apps.

   In Oberon there is no distinction between a .DLL and an .EXE so to
   speak. A compiled module is (or can be) both."

   *pjmlp* writes: "... In Oberon not only is every module an application, the
   exported procedures are available as commands on the REPL and callable
   via mouse actions as well."

18 Dec 2020

-  https://news.ycombinator.com/item?id=25462043 -
   comments on the Original Dartmouth College BASIC manual (1964):

   "Appendix B (Limitations on BASIC) gives a rule-of-thumb for the
   maximum length of a program as "in general about 2 feet".
   It was evidently possible to create a complex program in 2 feet  ..."

   In that system, you typed your program on a roll of teletype paper.
   More about BASIC programming at 7 Nov 2020 and 28 Feb 2019, below.      

27 Nov 2020

- https://sqlite.org/lpc2019/doc/trunk/briefing.md - SQLite on Linux

  "SQLite is not like other database engines. SQLite is not a separate
  process or thread. SQLite is a subroutine. SQLite is embedded in the
  application and uses the same heap and stack.

  An SQLite database is a single ordinary file on disk. An additional
  transient journal file may appear from time to time to help implement
  transactions that are atomic across crashes and power failures. ...
  Most databases are a few megabytes to a few gigabytes in size, though
  terabyte-sized SQLite databases are known to be used in production.

  The database file format is stable, well-defined, well-documented, and
  cross-platform. SQLite databases are commonly used as storage containers
  for sending structured content across the internet.

  Other database engines are usually found in the datacenter. SQLite is
  more commonly seen at the edge of the network.  Because the network edge
  is so broad, there are a vast number SQLite databases in active use -
  probably over one trillion (1e12).  A typical Android phone has hundreds
  of SQLite databases and does more than 5 gigabytes of database I/O per
  day."

  comments at https://news.ycombinator.com/item?id=25167423 -

  *antirez* writes: "The filesystem, and the file itself, are perhaps the
  *best* abstractions ever designed in computing. ... (but) a different
  low-level abstraction to access the storage in a way databases need to
  do is missing from POSIX."

  *Spivak* writes: "I think Ceph has the right model. The only abstraction
  is physical disk to addressable binary/object storage. Everything else
  is implemented on top of that so you can do S3, filesystems, databases
  all close to the metal."

- https://news.ycombinator.com/item?id=25219386 - comments on 
  What would happen if computers never got any faster? 

  *colechristensen* writes:  "Computer programs are like a gas, they'll
  fill up whatever container they are put in. This is unfortunate as
  computers get faster the programs that run on them tend to get slower at
  nearly the same rate. ... much of what we do on computers is the same
  exchange of text with a bit of decoration that has been done for
  decades, and yet nothing seems the 1000x better that one would expect.

  Programs, programmers, and software companies will expand until they run
  out of resources regardless of how much you give them. There is a real
  problem there, because there are things which should use negligible
  resources today which instead use resources akin to yesterday's
  supercomputers."
  
25 Nov 2020

- http://akkartik.name/illich.pdf - *Tools for Conviviality* by Ivan Illich
  (1973), Introduction p. 5, Ch 4 Recovery, p. 54.

  "Society can be destroyed when further growth of mass production renders
  the milieu hostile, when it extinguishes the free use of the natural
  abilities of society's members, when it isolates people from each other
  and locks them into a man-made shell, when it undermines the texture of
  community by promoting extreme social polarization and splintering
  specialization, or when cancerous acceleration enforces social change at
  a rate that rules out legal, cultural, and political precedents as
  formal guidelines to present behavior. ... At this point it becomes
  irrelevant whether an enterprise is nominally owned by
  individuals, corporations, or the state, because no form of management
  can make such fundamental destruction serve a social purpose.

  It is now difficult to imagine a modern society in which industrial
  growth is balanced and kept in check ... Our vision of the possible and
  the feasible is so restricted by industrial expectations that any
  alternative to more mass production sounds like a return to past
  oppression or like a Utopian design for noble savages. In fact ...
  scientific discoveries can be useful in at least two opposite ways. The
  first leads to ... centralization of power and turns people into the
  accessories of bureaucracies or machines. The second enlarges the range
  of each person's competence, control, and initiative, limited only by
  other individuals' claims to an equal range of power and freedom."

  "The world does not contain any information. It is as it is. Information
  about it is created in the organism through its interaction with the
  world. To speak about storage of information outside the human body is
  to fall into a semantic trap. Books or computers are part of the world.
  They can yield information when they are looked upon. We move the
  problem of learning and of cognition nicely into the blind spot of our
  intellectual vision if we confuse vehicles for potential information
  with information itself. We do the same when we confuse data for
  potential decision with decision itself."

  Work influenced by Ivan Illich appears at 23 Nov 2020, 17 Feb 2020, and
  2 Sep 2019.

23 Nov 2020

- http://akkartik.name/akkartik-convivial-20200607.pdf - 
  Bicycles for the Mind Have to Be See-Through by Kartik Agaram

  "Ivan Illich ... proposes (what) he calls
  *convivial* tools. According to him, the primary goal when making a tool
  shouldn't be to just make some tactical activity more convenient.
  Instead, it should be to preserve the degrees of freedom of individuals
  ... if a tool doesn't do quite what you need, don't try to paper over
  its deficiencies with a second tool. The maintenance burden of both will
  lead to compounding claims on your time, and on the time of others ...
  Instead, take the first tool out, and think about the problem anew.

  Taking tools out of existing workflows is difficult. ... If we grow used
  to something that we don't know how to build or manage, the prospect of
  losing it is painful. ...

  How do we build tools that can be maintained by end users in the field,
  without support from authors and experts?  The Mu project explores one
  approach in the domain of software: to support modification in the
  field, keep everything simple enough to be comprehensible by anyone,
  without exception.  Mu is a computing stack designed ... to have a
  strict complexity budget, to "fit in a single brain"; to not grow complex
  over time; and to reward curiosity, and encourage people to understand
  its internals.

  Our hypothesis is that using fewer abstractions ... can can make the
  maintenance task more approachable to end users. ... our plan (is) to
  expose implementation details but keep them simple.

  We'd like for Mu to demonstrate an alternative way for people to
  collaborate over software: by exchanging complete working stacks (all
  software running on a computer ...) designed to be manually merged for
  individual contexts.

  (Mu) implements high-level constructs out of lower-level ones.
  Dependencies flow down, and we avoid cycles in the dependency graph as
  far as possible.  It uses as little mainstream code (interface-driven,
  built with whatever's handy, indirectly depending on C) as possible. It
  uses as few notations (languages, syntaxes, intermediate
  representations) as possible. It prioritizes safety over syntactic
  convenience.

  Deemphasizing syntax causes source code to be closer to generated code,
  and the programmer's mental model to be closer to the machine. The
  programmer is habituated to communicate precise intent (and discover it
  in the process) rather than expect the machine to make (inevitably
  fallible) assumptions.

  Mu is parsimonious with its dependencies. At run time, Mu packages
  programs either as ELF binaries running on Linux or as bootable disk
  images bundled with a third-party Unix-like kernel.   Mu programs don't
  rely on *libc* or any other mainstream libraries. Eventually we will
  build the OS kernel in Mu as well.

  The Mu computing stack provides two notations: an unsafe notation for
  machine code (called SubX) and a type-safe and memory-safe statement-
  oriented language (eponymously called Mu) that mostly translates 1:1 to
  machine code.

  Currently Mu supports only the Intel x86 instruction set. Portability is
  explicitly a non- goal. ... Programmers working at this level are
  exposed to the constraints and complexities of the instruction set. ...

  The crucial hypothesis in designing (SubX) was that the *implementation
  properties* of parsimonious dependencies and minimal metacircularity
  trump superficial aesthetics of the syntax.

  Mu's trajectory follows that of early C to some extent; both languages
  were implemented without a high-level language, and so implementation
  simplicity was important. However, Mu learns from the trajectory of C,
  where compilers became metacircular at the first opportunity, and the
  availability of a high-level language for implementation has caused
  ever-smarter compilers, at the cost of explosive growth in compiler
  complexity. We don't want to make the same trade-off.

  To avoid ever needing a complex compiler, Mu is designed to
  never need any compiler optimizations. It achieves this aim by staying
  as close to the machine as possible ... we aim ... for each statement of
  safe Mu to expand to a single instruction of unsafe SubX.

  One consequence of aspiring to a 1:1 mapping with machine code: we don't
  abstract away registers. Since x86 machine code constrains instructions
  to no more than one memory operand, it makes sense to make programmers
  manage registers explicitly. We'll still verify the register allocation ...

  Mu has a strong but unambitious type system. The only goal is to avoid
  the memory corruption issues that plague the level below. ... Aborting
  immediately on memory corruption prevents many security vulnerabilities
  and simplifies debugging when compared to C.

  I hope I have demonstrated that one can get approximately to the level
  of C (lower expressiveness but higher safety) with a modest outlay of
  code and external dependencies, and that it is possible to explain how
  it all works in a matter of a dozen pages.

  Mu and SubX are statement-oriented and provide minimal syntax, so that
  translation steps are tractable to present to users. The entire
  toolchain is designed to be transparent ...
  
  Most software today is on a trajectory of ever-increasing complexity.
  Features are rarely deleted. Over time complexity invariably reaches a
  threshold where new features take longer and longer to add. At this
  point the project becomes much more selective about adding new features.
  ... Much of this trajectory stems from people's reluctance to modify
  software, a tendency Mu works hard to counteract. Given a stack that is
  easy to understand, it's worth revisiting the value of compatibility. If
  people can modify a project for their needs, the next step is to start
  deleting features they don't use. In the process they can reclaim
  vitality that has ossified under a high feature load.  ... Normally
  features the original authors don't like tend to languish. If forks
  become easy to create, then it's easy to spin off forks, and to direct
  demand for specific features to specific forks. ...

  Among programmers there's a long-standing lament about the excessive
  complexity in software projects. ... The original sin is to try to
  decompose a system into an "inside" and an "outside". While the instinct is
  laudable, it invariably leads to specialization. Repeat it over and
  over, and the number of such boundaries compounds, constraining us all.

  This paper has demonstrated Mu deconstructing the dichotomy between
  "inside" and "outside" ...  In the process, we've taken on some risks. Mu
  programs are aesthetically unappealing. ... Mu makes new kinds of errors
  possible ... But if we truly believe that the software development
  process should prioritize comprehension over ease of authorship, it's
  worth exploring what we gain by taking on these drawbacks.

  While Mu's build and runtime environment is fairly independent of
  mainstream software, it still relies on a host machine for the
  *development* environment. ... Over time these features will be
  reimplemented in Mu ... Lots more will hopefully be jettisoned
  indefinitely. We are willing to avoid expensive high-level features in
  our quest for convivial tools.

  The presence of run-time checks may well result in a stack that is
  slower than the mainstream, in spite of the performance benefits of
  streamlining the stack vertically (fewer layers) and horizontally (more
  forks, less complexity per fork). Even if it's slower, it's worth
  questioning what speed buys us. Unconstrained growth in performance is a
  political and economic goal for those selling computation by volume. If
  we each had one computer to truly call our own, truly running for our
  benefit, would it really run at full throttle day in and day out? Our
  experience with Mu suggests that it might be better to treat
  performance -- and much else that we tend to obsess over -- as something to
  satisfice rather than optimize."

  https://github.com/akkartik/mu has the code and much more.
  https://news.ycombinator.com/item?id=21268252 has technical discussion
  including the author's explanations and defense of some design
  decisions.  The author writes:

  "Indeed, much of Mu's design was motivated by the question, "if we
  imitated the codesign of OS and language that led to Unix and C, given
  what we know now, what would we create?" This question doesn't seem to
  be often asked in recent decades, with languages and OSs evolving
  separately."

  https://news.ycombinator.com/item?id=22599953 has more philosopical
  discussion. The author writes:

  "I've tried to distinguish between giving things a name to avoid having
  to work through details over and over again, and relying on something
  built by others so one never has to think about the details. ... I
  usually try to avoid the term 'abstraction' because it's gotten so
  debased. ..."

  Other work influenced by Ivan Illich appears at 17 Feb 2020 and 2 Sep 2019.

 7 Nov 2020

- http://tomasp.net/commodore64/ - The Lost Ways of Programming: Commodore
  64 BASIC

  "I believe that how we interact with a programming environment when
  programming is more important than the specific programming language
  that we are using. ...

  This is an interactive article that documents some of the interesting
  aspects of programming Commodore 64 BASIC. ... We will start with a
  Hello World example to see how things work and then we'll build a small
  Breakout game. This illustrates how easy it is to get started, how the
  environment supports learning and how the Commmodore 64 BASIC mode of
  interaction lets us gradually build a program in a way that is quite
  different from modern programming environments.

  ... I believe that interesting ideas on how to interact with a
  programming environment have been lost, largely because programming
  research became so focused on languages ... This article is an attempt
  to recreate some of the interesting past ideas. My choice of starting
  with Commodore 64 BASIC is a fairly pragmatic one. There are more
  interesting past programming systems, but this one was relatively easy
  to recreate."

  Comments: https://news.ycombinator.com/item?id=25008554.  Pertinent
  comments from months ago, https://news.ycombinator.com/item?id=23393548 - 

  *I've always thought that using BASIC as the default command line was
  really weird. ... You could type in a command to load something from a
  disk or run a program, or type a line number to start programming. How
  did that make sense to anyone??*

  "But that makes perfect sense to me!

  The commands you type in are, themselves, basic code. Line numbers just
  tell the computer to start storing those commands for later use. Chain
  them together and you have your own program, which you can save and load
  and run later.

  I find it all aesthetically beautiful, actually."

  More about BASIC programming at 28 Feb 2019, below.

30 Oct 2020

- https://github.com/mntmn/amiga2000-gfxcard - an Amiga 2000 Graphics Card
 
  "I decided in October 2015 in a feat of madness: "I'll just make my own
  graphics card. How hard can it be?" It turned out to be a very, very
  challenging project ... On the way, I had to learn how to design a PCB
  and get it manufactured, how to work with SMD parts, how to program in
  Verilog and synthesize code for an FPGA, how SDRAM and DVI/HDMI work (or
  how to get them to do at least something). ...

  The Amiga is probably the last 32-bit personal computer that is fully
  understood, documented and hackable. ... I hope that one day, we can
  have a simple but powerful modern computer that is at the same time as
  hackable and friendly as the Amiga was."

  https://news.ycombinator.com/item?id=24917101 - comments on another Amiga 
  article: "I am convinced that the appeal of the Amiga, and retro-computing in
  general, isn't just nostalgia - it's making a stand against the bottomless
  complexity and disempowerment of modern computing."

  https://github.com/mntmn/interim and http://dump.mntmn.com/interim-paper/ -
  Another project from the same author: "a radical new operating
  system with a focus on minimalism. ... I try to describe a computer and
  operating system that takes advantage of modern-day hardware technology
  while ideally being fully comprehensible in a couple of days. ..."

13 Oct 2020

- https://9p.io/wiki/plan9/Expanding_your_Grid/index.html - "Plan 9 was
  designed as a distributed system. After you install the   distribution
  from the cd, you have a self-sufficient one machine system,   a
  standalone terminal. We will consider this as "Level 0" - how do you
  proceed from here to a network of Plan 9 machines and provide Plan 9
  services to other clients? ..."

  More about Plan 9 at 21 Nov 2019, 19 Sep 2018, 23 Dec 2017 etc., below.

10 Oct 2020

- https://github.com/hatsugai/Fenestra6502 - "a 6502-based system with an
  extra circuit to improve the performance of procedure/function calls.
  ..." Includes photos of a handmade 6502 computer including the described
  circuit, built on solderless breadboards with lots of colorful wires.

 6 Oct 2020

- https://news.ycombinator.com/item?id=24686915 - 
  If you were to build the web today from scratch how would you design it?

  "I'd make search, and a basic news feed based social network first class
  citizens part of the infrastructure of the internet, free and available
  to everyone ...

  In that parallel universe, Zuckerberg would be expelled from Harvard ...
  Bezos would see no opening for a books retailer, or anything else, and
  would eventually find his biological father and take over the family
  bicycle shop and repair business, and would marry a waitress at the
  local diner who always remembered his order and always flicked him a
  smile.  ..."

10 Aug 2020

- https://news.ycombinator.com/item?id=24083738 - comments on 
  The Psychedelic Inspiration for Hypercard

  *api* writes: "I really miss the *thoughtfulness* of human-computer
  interfaces of the 1980s and 1990s. Serious amounts of thought and in
  many cases actual research was put into designing computer interfaces to
  maximize productivity and (get this) *minimize distraction*.

  The idea back then was that a computer existed to augment human
  intelligence, not to trap you in a dopamine loop Skinner box to maximize
  "engagement." In fact, the phrase "augmented human intelligence" was
  present in the actual name of the SRI research program that originally
  developed early GUIs, hypertext, and the mouse among other things.

  GUIs are an area where I think computing has gone very significantly
  downhill ... Modern interfaces are superficially prettier than those old
  GUIs, but ... If you ignore the superficial eye candy, many if not most
  modern GUIs are objectively worse on almost every metric.
  They're inconsistent, disorganized, unintuitive, and often distracting.
  Sometimes distraction is the actual objective, such as with mobile apps
  trying to dominate your attention to "go viral" or anything touching
  social media. ..."

  *zackmorris* writes: "HyperCard was the single greatest inspiration in
  my programming career. I learned it when I was about 12 ... You could
  dial the modem, speak text, make your own calculator or rolodex, just on
  and on and on, in probably the smallest amount of code that I've ever
  encountered. And my parents could even read the code, without ever
  learning how to program! ...

  The only downside is that it opened my eyes to how tech could serve
  humanity, only to see that vision inverted so that we ended up at the
  present day where humanity serves tech. I know that the direction that
  tech is going is wrong, but I have trouble articulating how or why. And
  it kind of haunts me that something as revolutionary as HyperCard could
  be written in the 80s in Pascal, such a primitive language by today's
  standards, but we keep missing the mark with all of our modern tools.

  What's the next tool like HyperCard that could free humanity from this
  tedious labor? I just don't know, and that bothers me. ..."

  More on HyperCard at 24 Feb 2020 and 28 Feb 2019, below.

23 Apr 2020

- https://queue.acm.org/detail.cfm?id=1039523 - A Conversation with Alan Kay 
  (2004) - 
  "Perhaps it was commercialization in the 1980s that killed off the next 
  expected new thing.
  Our plan and our hope was that the next generation of kids would come 
  along and do something better than Smalltalk around 1984 or so. ...
  But a variety of different things conspired together, and 
  that next generation actually didn't show up. One could actually argue ...
  that the success of commercial personal computing and 
  operating systems has actually led to a considerable retrogression in 
  many, many respects.
  You could think of it as putting a low-pass filter on some of the good 
  ideas from the 60s and 70s, as computing spread out much, much faster 
  than educating unsophisticated people can happen.
  In the last 25 years or so, we actually got something like a pop 
  culture, similar to what happened when television came on the scene ..."

22 Apr 2020

- https://news.ycombinator.com/item?id=20241138 - 
  comments on Smoltcp: A small TCP/IP stack in Rust - 
  "I designed smoltcp (and wrote most of the code currently in it). The 
  original TCP/IP RFC (RFC 793) contains several ambiguous requirements, 
  and as a result they do not specify a well-defined system. ...
  By using this (later, complete) collection of 
  TCP/IP RFCs that grew over the years, it is 
  indeed possible to implement a stack from first principles and have it 
  interoperate with other existing stacks without much trouble. ...
  However, being able to transmit some bytes reliably, and having a high- 
  performance stack that works well in real world conditions are 
  different. You might be able to do the former from RFCs, but the latter 
  absolutely requires a nontrivial amount of tribal knowledge that you 
  have to collect crumb by crumb, and often quite painfully, too.
  Smoltcp is somewhere halfway between."

 2 Mar 2020

- https://gigatron.io/ - Gigatron TTL Microcomputer - 
  Single-board computer that supports BASIC and video games made from about 
  40 simple "glue logic" chips, but no microprocessor or display processor.

  "There are some reference designs out there and we studied most of them.
  (They were based on 8-bit microprocessors like the 6502.) ... it became
  apparent (they) were not simple as possible for TTL. ... Unsatisfied,
  we set out to find a better architecture. ... This study evolved into
  our own architecture, with the ALU dividing the data bus into two segments,
  for increased throughput and reduced component count. Somewhere
  along that journey we discovered that low resolution video had come
  within reach of our design, without adding chips. This was possible
  by taking the unconventional step of bit-banging video signals from
  software, instead of designing a standard video generation circuit. ...

  *So why didn’t you use a 74181 ALU chip in your design?* They are
  large and relatively complex chips.  We thought it is more fun to
  stick to simpler chips. Also ... they have become difficult to
  obtain. ... The simpler chips from the 7400-series still have a
  useful glue logic function ... and many are still manufactured today
  for that reason.  
  (Our ALU) is a two-stage design. Stage one is a
  row of multiplexers that can do logical operations on the two 8-bit
  input values. It emits the left and right operands to the second
  stage. The second stage is an addition stage made from two 4-bit
  adders. ...

  ... our prototype was made with 74LS series chips ... introduced in 1971."

  Compare to BASIC Engine under 6 Jul 2018 and Uzebox under 24 May 2018, 
  similar functionality but with microprocessors, and Pong under 11 Jun 2018, 
  single-purpose pre-microprocessor video game made from 66 TTL chips.

24 Feb 2020

- https://news.ycombinator.com/item?id=22398899 - comments by *wrs* on the 
  Newton (1990s Apple handheld computer) - 
  "... having the whole world reduced to Windows and Linux doesn't seem 
  ideal. ... 
  crowding out any possibility of a different approach seems long-term 
  counterproductive ...
  In the Newton era it seemed like there were tons of great 
  ideas flying  around about processors, operating systems, filesystems, 
  languages, etc., and more importantly there was room to feasibly take 
  advantage of them in a  product. ... Nowadays ... there are big 
  important layers that have essentially become a  monoculture or 
  sometimes a di-culture, and people don't even try to innovate there any 
  more. ... the lower layers seem to have ossified a bit too soon ..."

  "... we had a pretty strong opinion on the Newton team that files were 
  not the right thing. ... There were never any 'files' on the Newton."

  The linked paper by *wrs* et al. describes their "object store (that)
  has many advantages over a more traditional file system".

- https://news.ycombinator.com/item?id=22281987 - comments on HyperCard, 
  the much admired 1980s-90s end-user programming tool for the Mac - 
  "In what way does the original web architecture (HTTP/URL/HTML) not 
  supersede and mostly independently improve on Hypercard?" 
  "Anyone who can click a mouse could make a HyperCard stack. 
  (a 'stack' was an application) ...
  You could ... save data in the stack itself. You could send it to your 
  friend, or back it up, simply by copying one file. ...
  Doing these with the web requires at least a server, a programming 
  language, and a database. ... you need a separate editing system ... 
  there's a *huge* learning curve ..."

- https://news.ycombinator.com/item?id=22344083 - comments on "home-cooked" software - 
  "There is a gap in tooling, there are currently no good Hypercard-like 
  tools that would allow to make 'personal software' and share it as 
  recipes."

  "Unfortunately there is an entire generation or two now of mainstream 
  developers who never had the opportunity to experience things like 
  Hypercard firsthand. It is always difficult to describe the full extent 
  of the power of systems like it without being immersed in it, and we 
  don't really have contemporary equivalents to make the case."

  "What's it take to get HyperCard back? ... Not just functionality, but 
  ubiquity -- being a tool that every kid is one  click away from, nothing 
  to install, no permission to ask, just start  learning..." - Response 
  by *mikelevens*: "For the ubiquity you  need it to be free and 
  extremely simple to install. Apple gave HyperCard  away for free 
  preinstalled on its machines. ... Technologically, you need 
  representations  of 8 concepts: ..."   Detailed explanation of 
  HyperCard features  and internals follows.

  More on HyperCard at 28 Feb 2019, below.

17 Feb 2020

- https://www.cs.kent.ac.uk/people/staff/srk21/research/talks/kell19de-escalating-intro-script.txt -
  De-Escalating Software, a scriped introduction, by Stephen Kell.  
  "This is a talk about a crisis of faith. ...
  I am starting to believe that as a society, we are currently
  learning, on many different fronts, that our dependency on software is
  escalating in an undesirable way. When I say that software is
  escalating, I mean two things. Firstly, the complexity of even the
  simplest software deployments gets larger year on
  year. Feature-equivalent software runs slower in ways that cannot be
  explained by niceties, graphical flourishes or even directly by
  programmer laziness. The amount of code needed to realise a given
  application also seems to be increasing, with consequences for the
  overall tractability of working with that application's code, as well
  as capital costs of deploying and executing it.

  ... By "escalation" I also mean that our best and only response, at
  present, seems to be to develop more software along similar lines,
  believing that if we iterate our current approach enough times, we
  will overcome our problems. My faith in this line of thinking has been
  exhausted. I suspect that a better society would be dependent on far
  less code being deployed ...
  That need not mean we must forgo the benefits of computation as we
  currently enjoy it -- I believe quite the opposite: that with less, we
  will be able to do more.
  
  ... Since the late 1940s, and especially since the 1970s, we have
  bootstrapped a vast ecosystem of computer hardware and software.
  ... Bootstrapping processes, like other feedback processes, have
  lives of their own in the sense that they are not fully controlled
  from the outside. In software, we see this with how software creates
  culture which creates the next software. Both software and humans are
  parts of the amplification cycle. A cyclic system does not have
  clearly delineated means and ends, and is prone to confuse the
  two. Even where the *a priori* human ends ought to be obvious,
  cultural factors can override this.

  There are lots of phenomena in software that I will call "escalators".
  They're problems which generate newer, worse instances of themselves
  over time. Often we do not even see them as problems; we view them as
  progress. But often that view is the result of confusing technical means
  with human ends. ...
  It is the antagonism between positive local gain and negative
  global outcome that characterises escalators. Those involved *are*
  often acting rationally, but the outcome is madness.  

  Ivan Illich was a 20th-century philosopher whose work recurringly
  examines the counterproductivity of modern social institutions.
  ... I encountered Illich's writing entirely by chance, but was
  immediately struck by how directly his words transferred to described
  what I saw as the plight of software."

  A similar talk by Kell is excerpted at 2 Sep 2019 below.

14 Feb 2020

- https://news.ycombinator.com/item?id=22303710 - comments by the author on Shell Git -
  "... I said that the internals were so simple that you could implement a
  workable version of git using only shell scripts inside of an
  afternoon. So I wrapped up what I was working on set out to prove it.  

  Five hours later, it had turned into ... "oh (no), I didn't
  realize that the git index is a binary file format". Then it became a
  personal challenge to try and make it work anyway, despite POSIX shell
  scripts clearly being totally unsuitable for manipulating that kind of data.

  Anyway, this is awful, don't use it for anything, don't read the
  code, don't look at it, just don't."

 9 Feb 2020

- https://kevinlawler.com/prompts - "Oblique Strategies ...
  Brian Eno created a collection of strategies to help artists break 
  creative block. We can do something similar for programmers ..."

- https://maryrosecook.com/blog/archive - for example
  http://gitlet.maryrosecook.com/docs/gitlet.html -
  "Gitlet is an implementation Git in JavaScript ..." - 
  a literate program with annotations and code in side-by-side format.

- http://c9x.me/edit/ - "Vi + Acme ...  I like Acme a lot, but without
  vi keybindings, I cannot edit text. So I tried to mix the two
  together. ..." - run the animation at the bottom of the page.

- https://kodfabrik.com/happy-hacking-linux/ - 
  "... takes Arch Linux and adds sane defaults that will work best for 
  developers. ..." - more at https://kodfabrik.com/journal/

 6 Feb 2020

- https://blog.sophaskins.net/blog/my-week-at-the-recurse-center/ -
  "The night before my (visit) started, I was ... having doubts
  (about) the mission itself: 'to get dramatically better at programming'. 
  Did I even *want* to get better at programming?

  A lot of bad things in the world have been created by programmers: ...
  A lot of bad *people* love programming: ... 
  The norms of programmer culture still revolve around using needless 
  complexity as a cloak of wizardry. I don't think programming *skill* is 
  particularly important in my job, so why am I even doing this?

  My fears were not realized. ... I re-learned to love programming. ...
  Amidst constant reminders that tech is a toxic sewer ...
  There can be good in programmers. There can be joy in programming. 
  I want to find those things - I want to continue to learn and to share ..."

 6 Feb 2020

- https://news.ycombinator.com/item?id=22043042 - response to
  "What has your work taught you ... ?" - 
  "Computers don't work, internet doesn't work, software doesn't work. If 
  something functions flawlessly it's because there existed a group of 
  people who figured out a rock solid setup at one point in time, and 
  another group of people maintaining it actively right now. Many people 
  seeing something that "just works" and it's "free as in beer" demand a 
  similar setup for their own business assuming that creating it requires 
  almost zero effort and cost."

  This appeared a few weeks ago but I post it here after the Iowa caucus: 
  https://www.vice.com/en_us/article/3a8ajj/an-off-the-shelf-skeleton-project-experts-analyze-the-app-that-broke-iowa
  "The app used to report early results in Iowa's Democratic Presidential 
  primary caucus ... malfunctioned during the caucus, causing mass chaos 
  and delaying the public reporting of results until Tuesday evening. ..."

11 Dec 2019

- https://blog.sfpc.io/post/157624785016/learning-to-teach-teaching-to-learn -
  report on a Learning to Teach conference at the School for Poetic Computation:
  "... It's important to remember to teach the emotional space of 
  programming. The frustration, the short moments of delight, the time 
  spent debugging. How can we best acknowledge the cycles of emotions in 
  programming (and learning) in the classroom. ... Build in a process for 
  problem solving. ..."

11 Dec 2019

- https://www.deconstructconf.com/2018/nabil-hassein-computing-climate-change-and-all-our-relationships -
  Computing, Climate Change, and All Our Relationships, a talk by Nabil Hassein:
  "... So the global north has less than 1/7 of the world's population. It 
  takes home nearly 3/4 of the world's income. ...
  today, I'm going to mostly remain zoomed out at this very broad view of 
  global north and global south. And to give a sense of why that is and 
  the connections to climate change ... 
  UK is the biggest per capita contributor to global temperature change 
  and the least vulnerable ...
  7 out of 10 of the countries most affected by climate change are in Sub- 
  Saharan Africa.  Climate change is a racist crisis.  
  To me, it is absolutely clear that ... climate change would never have been 
  allowed to reach the crisis point that we're at now if it looked 
  different in terms of who was benefiting from the wealth associated with 
  the extraction of fossil fuels and carbon pollution ...
  versus who is suffering as a result of the same things.

  (Here is) a fact that just blew my mind when I learned it in the news late last year ...
  the electricity usage of the Bitcoin network.  Last time I checked ...
  it was around 0.29% of global electricity just for this one network. ...
  So this map (on the slide), which depicts, in orange, the countries 
  which use less electricity than the Bitcoin network-- I think one of the 
  things that jumps out right away is that only three countries in Africa 
  actually are allocated a greater share of this critical global resource 
  than the Bitcoin network. 
  And notable among the countries which is not one of those three is 
  Nigeria, the most populous country in Africa ...
  Think about the fact that this one application is receiving a larger 
  share of a critical global resource than all of the schools, than all of 
  the hospitals, than all of the homes, than all the industry in a nation 
  of 186 million people. ...

  And I wonder-- I studied math and computer science at college. And there 
  was literally, not once, in any of my classes, any discussion of these 
  kind of material impacts. And maybe that should actually be part of our 
  curriculum. Maybe that would be part of how we, as a field, can think 
  about our responsibility to address climate change. ..."

  via speaker's blog https://nabilhassein.github.io/blog/computing-climate-change-and-all-our-relationships/
  which also links to the slides 
  https://nabilhassein.github.io/slides/deconstructconf-2018/assets/player/KeynoteDHTMLPlayer.html#0

  Also from the speaker's blog at https://nabilhassein.github.io/about -
  "... My relationship with the field of computing has gotten more 
  antagonistic the more I've studied its negative social impacts on the 
  communities I care about, yet I still retain my hope that another 
  technology is possible. I believe it's up to us technologists to build 
  it, or else we must be prepared to discard the entire field of 
  computing, given its historical origins in and ongoing entanglement with 
  profound human oppression and ecological destruction."

  
21 Nov 2019

- https://news.ycombinator.com/item?id=1154650, comments on Plan 9, long 
  explanation includes:
  "... designed by folks who were very comfortable with using a command 
  line, and so one ends up with huge amounts of text on screen that you 
  interact with ...
  Plan 9 can be very disturbing to work with at first; everything seems  
  incredibly primitive, and it has a very minimalist feel to it, but when  
  you get used to the idioms it can be incredibly powerful. ...
  The whole experience is very strange, and yet there's a certain elegance  
  to it." 

- https://news.ycombinator.com/item?id=19177819 - 
  "Plan9 was far superior as a developer's system. Its text based tools 
  are the best, bar none. But really it owes that to Project Oberon. ...
  I describe it as a racing car, not everyone can drive it, you need to 
  work to keep it going, you might kill yourself but when you're out 
  front, it feels amazing."

- https://news.ycombinator.com/item?id=19171242 - 
  Why a full-featured web browser was never developed or
  ported:  "... For Plan 9 the classic web browser is a culturally alien 
  type of software: complex and to some degree necessarily monolithic."

  http://p9.nyx.link/netlib/9fans/9fans.0007 - Plan 9 developers explain:
  "Mozilla is just the sort of stand-alone monolith that we're trying 
  to argue against. ... I'd rather see web access be one aspect of a 
  system in which the pieces work in concert."

  "To me, Plan 9 has always been about stepping back, looking at the
  whole problem, and solving it with hindsight. ...  Within the
  bounds of the system, compatibility with less discerning environments
  is not an issue. ... 
  So Plan 9 could only hope to reach a fraction of the sites. 10% of the 
  work might get you 90% of the sites, to a bearable degree. ...
  So I'm wondering if you take what the web has to offer - what people try 
  to show, in pages - and revisit it, from a Plan 9 viewpoint. Build a 
  Plan 9-only internal system ..."

  Plan 9 did develop several limited browsers, including *Mothra* and *Abaco*.
  See related comments under 4 Oct, below.

27 Oct 2019

- https://news.ycombinator.com/item?id=21354626, comments on
  '... User and Programmer': "Sometimes I wonder if the people of the 1960s
  (i.e the people who came up with lisp, multics, unix) had the right idea: to
  use a computer you should program it. There are many programs, each does a
  different thing, you program your final product by composing programs. ...
  somehow programs have become less composable over time. Far from the original
  ideals. Programs become standalone products. ... We should have kept programs
  as programs - make them super composable, and then let the end user design
  their own products that fit them best."

 4 Oct 2019

- https://news.ycombinator.com/item?id=21052915, comment on 'Why can't browsers
  just be used for browsing': "Browsers are a case of monolithism (and the
  inner-platform effect, of course).  In actuality, they are multiple different
  kinds of programs, welded together for no sensible reason: an http fetching
  daemon, a "runner" to open URLs, several document viewers, a virtual machine,
  an OS with an API, extensive libraries for everything that the OS below the OS
  already offered, one or several programming language JIT compiler(s) and
  runtime(s), and some bits and pieces.   In a healthy environment, there
  would not be a second OS on top of the normal one. And all those parts would
  be separate software, with standardized interfaces. ..."

 3 Oct 2019

- https://www.cs.kent.ac.uk/people/staff/srk21/blog/research/end-to-end-razor.html
  ... by implementing features higher up, we nearly always end up with not one
  but many variants of the same feature. ...  So in fact, there are very real
  incentives for implementing functionality at the lowest sensible layer. ...

- https://www.cs.kent.ac.uk/people/staff/srk21/blog/research/tools-or-not-tools.html
  (Consider) *tools versus run-time systems*. Dynamic O-O environments are very
  much *systems*, geared around the ability to push new capabilities down into
  the system's fabric, rather than having them sit on top. ...
  the lower some functionality is integrated into a system, the more
  pervasively available it is, so the more power and leverage it confers.
  Smalltalkers and other dynamic language advocates know this. ...
  Most of us don't use runtimes that have this amount of dynamism and
  immediacy ... What's better about having it as a runtime rather than just
  a tool?  Well, its functionality would be embedded right there in your
  running program. As a consequence, it supports exploratory, interactive,
  programmatic use. If you dropped to a REPL in your program, the innards of
  the tool would be laid out across your program state, pushed into fields
  on program objects. ...

  Integration of research techniques into runtimes
  arguably scales poorly -- since we all have to integrate into the same
  runtime, we have to achieve consensus on that runtime's interfaces.
  Tools, being freestanding and piecemeal, arguably scale better.
  You could say that lots of small, freestanding tools are the
  postmodern way, whereas one true runtime system is a classical ideal. ...

  (We would need to)  design a runtime infrastructure that is specifically
  easy to extend. But that seems to be begging the question:
  if we knew how to build this magical runtime ... we'd already have done it
  and solved the problem ages ago. ...  we need to get into the mindset of
  tolerating a lot more heterogeneity. ... it means pushing radically downwards
  our notion of "runtime" so that most of the typical implementation decisions
  of an object-oriented runtime ... are actually *user-level* decisions ...
  This contrasts with traditional runtimes, in which the object abstraction
  is *constructed* by the runtime implementor in a way that is *prescriptive*.
  ...

 9 Sep 2019

- http://www.math.bas.bg/bantchev/misc/az.pdf - *The A-Z of Programming
  Languages* (interviews with programming language creators):
  Smalltalk-80: Alan Kay, p. 116 -
  The progression from the first Smalltalk to the later Smalltalks was towards
  both efficiency and improved programming tools, not better expression. ...
  'Good meta' means that you can take new paths without feeling huge burdens
  of legacy code and legacy ideas.  We did a new Smalltalk every two years at
  PARC, and three quite different designs in eight years --- and the meta in the
  previous systems was used to build the next one. But when Smalltalk-80 came
  into the regular world of programming, it was treated as a programming
  language (which it was) rather than a meta-language (which it really was),
  and very little change happened there after. ...

  *(Some see) the future of computer programming in reassembling existing libraries
  and components, rather than completely fresh coding with each new project.
  Do you agree?*  I think this works better in the physical world and really
  requires more discipline than computerists can muster right now to do it well in
  software. ... For most things, I advocate using a dynamic language of very
  high level and doing a prototype from scratch in order to help clarify and
  debug the design of a new system -- this includes extending the language
  to provide very expressive forms that fit what is being attempted.
  We can think of this as 'the meaning' of the system. The development tools
  should allow any needed optimizations of the meaning to be added separately
  so that the meaning can be used to test the optimizations (some of which will
  undoubtedly be adapted from libraries).  In other words, getting the design
  right particularly so the actual lifecycle of what is being done can be
  adapted to future needs is critical, and pasting something up from an
  existing library can be treacherous. ...

  [Marshall] McLuhan said that most people can only experience the present
  in terms of the past.  So 'new' gets turned into 'news'. ...
  Marketing people really want 'news' (= a little difference to perk up
  attention, but on something completely understandable and incremental).
  This allows news to be told in a minute or two, yet is interesting to humans.
  'New' means 'invisible', 'not immediately comprehensible', etc.  So 'new' is often
  rejected outright, or is accepted only by denaturing it into 'news'.
  For example, the big deal about computers is their programmability, and the
  big deal about that is 'meta'.  For the public, the news made out of the first
  is to simply simulate old media they are already familiar with and make it a
  little more convenient on some dimensions and often making it less convenient
  in ones they don't care about (such as the poorer readability of text on a
  screen, especially for good readers). For most computer people, the news that
  has been made out of new eliminates most meta from the way they go about
  designing and programming. One way to look at this is that we are genetically
  much better set up to cope than to learn.  So familiar-plus-pain is
  acceptable to most people. ...

 2 Sep 2019

- https://www.cs.kent.ac.uk/people/staff/srk21/research/talks/kell19software-slides.pdf
  Software Against Humanity? An Illichian perspective on the industrial era
  of software by Stephen Kell.
  "Software (is) an industrial institution.  The institution (is) not working.
  ... Examples of research malaise:
  software performance viewpoint unchanged from 1970s ... Examples of
  practical malaise: increase of hello-world complexity, hardware advances
  soaked up and increasingly invisible, subversion of 1960s-80s idealism:
  open-source, internet, ...

  (Ivan Illich)  observed that (institutions he
  criticised were) poor at (their) stated ends... the means and ends had become
  confused! (those institutions) can still be self-sustaining, can still claim
  advances by (their) own criteria ... code complexity per unit value is
  increasing, overriding research culture is one of escalation, applying more
  software to the problems of software... believed will overcome,
  not worsen, problems ...
  Assumption is always: *the next* software will fix this. ...

  Escalators can often be identified by *blaming the human*.  'Fix your code!'
  ... We revere the *internal* and denigrate the *external*. (We have a)
  special word: *legacy*.  This disregard is not shared by empirical science,
  nor is it shared by all engineers.  (It is) Massively counterproductive.
  (It increases) integration cost, reimplementation.
  (It decreases) tool power, maintainability.
  ... Forking off a new *whatever* is just 'what we do'.
  It is perceived as a free operation. Integration is someone else's problem.
  They should have used the shiny new thing from the start! ...
  there is a *radical monopoly*. It is a monopoly of
  the *recent*. 'If you can't keep up with change, that's your problem.' ...

  Investment of effort in a codebase is good, surely? Maybe not, if it lessens
  others' ability to benefit.  The more power expended on a codebase,
  the more power is needed to *use* or *contribute*. Think: Linux kernel,
  Android, LLVM, ...

  It is not a contradiction that software can help de-escalate itself.
  Such software should engender *much less future programming* ...
  We need a culture that values empowering individuals,
  not providing warm bodies to feed the beast ...
  The norm is to teach the 1970s industrial view of software,
  without even acknowledging this as a culture! ..."

10 Jul 2019

- https://news.ycombinator.com/item?id=20398439 - comment by WalterBright on
  Floating Point Routines for the 6502 in Aug 1976 *Dr Dobbs* -
  "... programming an 8 bit 6800 for an embedded controller means keeping track
  of 6 or more things going on at the same time, while modern software focuses
  on one thing at a time and isolating it from everything else.  Those things
  include the contents of each register, the stack level, the size of the code,
  interrupts going off, polling that has to be done, counting cycles, etc.
  Organizing code into functions is a luxury not usually affordable.
  It sounds tedious, but it was fun. ..."

 9 Jul 2019

- http://oldblog.antirez.com/post/redis-manifesto.html - Redis Manifesto by antirez -
  "Code is like a poem; it's not just something we write to reach some practical
  result. Sometimes people that are far from the Redis philosophy suggest using
  other code written by other authors (frequently in other languages) in order
  to implement something Redis currently lacks. But to us this is like if
  Shakespeare decided to end Enrico IV using the Paradiso from the
  Divina Commedia. ...

  We're against complexity. We believe designing systems is a fight against
  complexity. We'll accept to fight the complexity when it's worthwhile but
  we'll try hard to recognize when a small feature is not worth 1000s of lines
  of code. Most of the time the best way to fight complexity is by not creating
  it at all.

  We optimize for joy. We believe writing code is a lot of hard work, and the
  only way it can be worth is by enjoying it. When there is no longer joy in
  writing code, the best thing to do is stop. To prevent this, we'll avoid
  taking paths that will make Redis less of a joy to develop."

 1 Jul 2019

- https://news.ycombinator.com/item?id=20315268, from author's own comments on
  http://cowlark.com/2019-06-28-cpm-vi/ - "I find CP/M interesting because it's
  provably the minimum viable product for an operating system. It was the
  personal computer desktop operating system that really worked. It came with
  full documentation, a full development system (an assembler and a debugger),
  and a full set of tooling to allow you to port CP/M to new systems. It was
  portable, too, and you could run the same program unmodified on nearly any
  hardware which supported CP/M. So it was this great open-ended system,
  cheap enough to get into the hands of ordinary people, simple enough that
  you could understand it all, and yet sophisticated enough that, with enough
  time, you could achieve *anything* on it...

  The CP/M kernel is 3.5kB of 8080 machine code. I think each frame of that
  video consumed more space than that."

15 Jun 2019

- https://github.com/thomasahle/sunfish - Python Chess Engine -
  "Sunfish is a simple, but strong chess engine, written in Python,
  mostly for teaching purposes. Without tables and its simple interface, it
  takes up just 111 lines of code! Features: 1. Built around the simple, but
  deadly efficient MTD-bi search algorithm. 2. Filled with classic as well
  as modern 'chess engine tricks' for simpler and faster code. 3. Easily
  adaptive evaluation function through Piece Square Tables. 4. Uses standard
  Python collections and data structures for clarity and efficiency."
  via https://news.ycombinator.com/item?id=20068651

- https://github.com/jmou/zit - a minimal implementation of git written in a
  a few hundred lines of code. "... zit is not intended to be "well written"
  code. ... Instead zit is meant to be a terse implementation to help
  demystify git. ...
  Most of the files are named after actual git commands, so you can use git
  help to read relevant documentation.
  ... this is not a robust implementation of git so don't let it out
  on your important code. ..."  About twenty very short
  scripts in bash or Python, one for each command plus some helpers.
  Demonstrates some clever idioms in a terse, almost comment-free style.
  via https://joy.recurse.com/posts/257-zit-the-imitation-stupid-content-tracker
  Compare to *gitlet*, http://gitlet.maryrosecook.com/docs/gitlet.html
  *pygit*, http://benhoyt.com/writings/pygit/ and *wyagit*, https://wyag.thb.lt/

- https://github.com/jmou/rc-snake - Snake game in the terminal,
  coded in Python using *curses*, in 121 lines.
  Instructive but incomplete, for a barely working fork see
  https://github.com/jon-jacky/rc-snake

15 Jun 2019

- http://pgbovine.net/research-design-patterns.htm - Research Design Patterns -
  "... How do people come up with research ideas?
  ... I've noticed some common patterns throughout the years.
  ... Here are my top ten: ... *8. Mr. Beast.* Mr. Beast is a YouTuber known
  for putting an absurd number of hours into seemingly-mundane things, like
  counting from 1 to 100,000.
  You can channel Mr. Beast in your research by being willing to spend an
  absurd amount of time doing what your peers won't. Paradoxically, by grinding
  on seemingly mundane tasks, you can actually get deeper insights that others
  overlook simply because they haven't put in the raw hours. I've gotten many
  great ideas this way, not because I'm any smarter than my peers, but just
  because I was willing to put in the hours when others weren't. ... (examples
  with links) ..."

23 May 2019

- https://news.ycombinator.com/item?id=19986126 - Comments on
  SerenityOS -  "Serenity is an unapologetic remix/mash-up of all the things
  I like in software.   Not just visually, but also code-wise. ...
  I would like to make this system good enough that I can spend most of my time on it.
  Without losing track of the original ideas. ...
  I feel like *nix used to be a lot of fun and full of hacker's spirit,
  and it's just not like that anymore. Things aren't simple anymore,
  and they can't easily be taken apart and understood in an evening, like they used to.
  So I figured I can just make my own then, just the way I like it."

8-11 Apr 2019, 28 Sep 2020, 9 Nov 2020

- https://news.ycombinator.com/item?id=1476059, comments by *dasht* on
  GNU HURD: Altered visions and lost promise:
  "I was one of the hacker employees of the FSF back in the early days
  of the HURD project.  ...  The original vision for the GNU system ...
  was to - sure - grow a unix clone, but then to build a user space
  that much more closely resembled that of lisp machines.
  Emacs (with its lisp extensibility) was taken to be a paradigm
  for how interactive programs might work. ...

  Interactive programs should be uniformly customizable, extensible,
  and self-documenting - roughly in the manner of Emacs.
  That sounds like a trite thing. After all, the programs we wound up with
  have all three traits. ...
  I mean something more specific but hard to convey concisely. Most of
  (our present programs are) not written as extension packages,
  which betrays an architectural weakness in contrast to emacs.
  (Their) interaction model and customization model is awkward and ad hoc,
  compared to emacs. (Their) on-line documentation ... is not designed
  in a way such that its enhancement is a natural part of writing extensions.
  ... the architectural approach (emacs) takes is vastly more sane than
  what the interactive programs we wound up with use. ...
  (These) observations apply (to Gimp), to the Open Office suite,
  to Gnome, to Firefox, and more.
  We have a big, barely maintainable heap of discordant and vaguely
  conceived functionality.

  On a more mundane level, even the command line got horked.  ...
  (we wanted) a shell much more like the much-loved shell on the Tops-20
  operating system. The (shell) was supposed to be gradually refined
  so that those standard "*--help*" messages could be automagically
  used by the shell to intelligently prompt for arguments to a program.

  I guess I should add that a lisp - most of us that I knew assumed Scheme -
  would figure prominently as the main extension language (rather than Emacs lisp).
  Why a lisp? Well, it had a proven track record and that was our aesthetic
  -- I'll leave it at that."

- https://www.recurse.com/blog/11-exploring-emacs, Exploring Emacs:
  "Emacs makes it easy to see the code behind its commands. ...
  For instance, if you want to see how a particular command-key sequence works,
  type *C-h k* and then the key sequence into the modeline prompt.

  If you're curious how *C-h k* itself works, type *C-h k C-h k*.
  According to the *Help* buffer that appears, *C-h k* corresponds to the
  Emacs Lisp function *describe-key* defined in *help.el*.
  Move your cursor onto the *help.el* text in the *Help* buffer and press enter.
  You're now looking at the Emacs Lisp source for *describe-key*. ..."

- https://news.ycombinator.com/item?id=5729291, comments by *brudgers* on
  How to Learn Emacs: A Hand-drawn One-pager for Beginners:
  (which describes some command-key sequences or keyboard shortcuts
  like *C-p*, which moves the cursor to the previous line.)
  "The power of Emacs is being command driven. The command for moving to previous line is:
  *previous-line*.  The mini-buffer is where one enters commands. The command
  for switching focus to the mini-buffer is: *M-x*.  Tell the new user
  what is really going on. To move to the previous line:
  a) enter the command *M-x* to switch focus to the mini-buffer
  b) enter the command *previous-line* to move the cursor
  c) after entering the command, focus will return from the mini-buffer to the invoking buffer.
  ... until (new users) have somewhere to hang *C-p* it's not a mnemonic, it's just
  a weird way of doing stuff ... giving the learner *previous-line* first,
  gives them somewhere to hang it ...
  what tutorials are teaching is not the language of Emacs (commands and eLisp),
  but the language of Emacs users (shortcuts) ...
  the starting point for everything is *M-x command*."

- https://news.ycombinator.com/item?id=24209937 comments on Mousemacs - 
  *thom*: "Emacs is fundamentally command driven - everything is a command,
  and can be invoked, edited or replaced the same way. What triggers those
  is obviously key bindings for a lot of people but it's not really what
  makes Emacs powerful or extensible. 

  *kqr*: "I agree. Vim is inherently keyboard-focused. That Emacs is not, and
  instead focuses on the command as the fundamental unit driving everything,
  is its primary strength."
  
- https://news.ycombinator.com/item?id=24560923 comments on The Era of VSCode -
  *TemMPOraL*: "... Emacs is best viewed not as text editor with
  plugins, but as a Lisp Machine emulator with a text editor. The joke
  about it being an OS is more true than people think: what you get is a
  (2D, not 1D like shell) text-oriented programming environment, back from
  the times where "a programming environment" meant a fully 
  end-user-programmable OS.

  This has an important downstream consequence on the "plugin" ecosystem:
  since these "plugins" are better seen as small applications running on
  a shared, restriction-free OS, they don't need a fixed and restrictive API
  to interoperate. The entire Emacs is the API, and as long as an elisp app
  follows conventions and plays nice, it will almost seamlessly interoperate
  with every other app. ...

- https://news.ycombinator.com/item?id=25028157 comment by *submeta* on
  (the program) Alfred: 
  "I can open a scratch buffer in Emacs, hack away commands, put them
  together in a Lisp function, put it in my *init.el* file, bind it to a
  shortcut very easily and keep extending my Emacs setup.
  This wasn't easy in any (other) editor I used. And none of these editors were
  meant to be used like that ..."

- https://news.ycombinator.com/item?id=25038572 comment by *Upvoter* on
  Why are so many coders still using Vim and Emacs? - 
  "Because emacs is awesome. Every key press runs a program(!) ..."
  
- https://news.ycombinator.com/item?id=6322734, comment by *samatman* on
  Start Using Emacs  A Thorough Guide for Beginners:
  "... Emacs is an ancient book of magic spells, with a strange,
  hoary culture surrounding it. It is phenomenally powerful,
  and also very, very weird. ..."

18 Mar 2019

- https://news.ycombinator.com/item?id=19416485 - comments on
  *The Unix-Haters Handbook* -  "I think (this book) still has
  a valuable lesson that many, particularly young CS students,
  would benefit from: Unix is not the perfect fundamental model for computing.
  C is not the gospel. Their prevalence today is as much a historic and economic accident
  as a rational consequence of their objective merits. Both are social artifacts,
  not manifestations of fundamental truths."

  "... I still miss my Lisp Machine. It's not that Unix is really that bad,
  it's that it has a certain model of computer use which has crowded out
  the more ambitious visions which were still alive in the 70s and 80s."

  BUT --

  https://news.ycombinator.com/item?id=19407811 - comments on
  fragmentation and dead ends in Lisp projects -
  "... as an aside lisp also has a reputation, unfounded or not,
  for encouraging people to develop a bespoke private universe
  that's hard for other people to get a handle on."

10 Mar 2019

- https://news.ycombinator.com/item?id=19344872 - Comment on The Emacs
  Package Developer's Handbook - "... the highly imperative Logo-like
  model of coding is, though kind of clunky at times, also extremely
  intuitive and straightforward. Your programs often work the same way
  you work: go to the other buffer, search forward for a regexp, kill
  the line, go back to the beginning, and so on, just like “editor
  macros.” So there’s no funky abstraction frameworks with models and
  controllers and whatnot, just buffers with cursors basically."

28 Feb 2019

- https://news.ycombinator.com/item?id=19263295 - Comments on
  *Hypercard Users Guide* (1987) - "Hypercard was a thrust in the
  direction of the Engelbart/Kay/Papert vision of personal computing,
  one where there wasn't so much of a division between "programmers"
  and "users" ... This vision of computing has fallen out of fashion
  ...  We have, instead, allowed our personal
  media to become arcane devices of dubiously "necessary"
  complexity. You can see this in any cafe where a web developer is
  using a teletype emulator to create a UI, or when someone cannot
  take the logical "next step" in processing some information in their
  spreadsheets (like retrieving data easily) because the system is not
  set up to allow them to explore that possibility without first
  learning a full fledged programming language top to bottom. ...  you
  "do Hypercard" in Hypercard itself, and that the home stack is
  itself an explorable example of how the whole system works. ..."

  "What was great about the later versions of Hypercard is how they
  fit holistically within OS8/9 (operating system) ... What really
  should have happened next is that many of the basic applications
  should have themselves been implemented in "a hypercard". For
  example, imagine a Finder that let you peek under the hood to see
  all of its scripts and, after some kind of "unlocking" allowed you
  to change it. You get access to a lot of the power of the OS's API
  for free at that point ... The switch to Unix also meant a switch to
  an older, more complicated, less intuitive bundle of methods for
  system scripting. Useful UI metaphors go away at that level and are
  replaced with bad and outdated metaphors, like the teletype.
  ... personal computing operating systems seem to have regressed from
  the contructionist perspective. ... you cannot have a "modern
  hypercard" without having a different kind of operating system,
  which itself might require a different hardware architecture."

- https://news.ycombinator.com/item?id=19239776 - Comments on "Why 80s
  BASIC still matters" - "BASIC made it easy to learn incrementally,
  one line at a time. Syntax and block issues in Python require too
  much up-front training, in my opinion." ...

  "... I know from teaching kids that LINE NUMBERS make more sense to
  them. ..."

  "... I understood 8-bit BASICs ... because I could spatially follow the
  flow of a program written with GOTO: knowing the line number told me
  roughly where in the code it would land. But code that used labels
  and indirection(arrays, pointers, that kind of thing) was beyond me
  for quite a while ... Modern languages pack in tons of indirection
  because that's where the power tools are - but an introductory
  environment might benefit from cutting down on that."

  "... BASIC worked without any planning whatsoever. You don't need to
  declare variables, or even arrays if you only use subscripts
  1-10. Strings handled automatically.  So it was really fun to play
  with. You could make your new computer do something rather quickly,
  and refine it over time.  Line numbers were needed on the old 8-bit
  systems that didn't have full screen text editors with copy/paste
  built in. It's how you told BASIC where to put new lines in the program. ..."

20 Feb 2019

- https://www.nytimes.com/2019/02/13/magazine/women-coding-computer-programming.html - The Secret History of Women in Coding - features Mary Ellen
  Wilkes, who worked on the LINC laboratory minicomputer in the 1960s and 
  wrote these papers about it:

  http://www.digibarn.com/stories/linc/documents/LINC-Mary-Allen-Wilkes/Conversational-Access-CACM-1970.pdf - Conversational Access to a 2048-word Machine, 
  Comm. of the Association for Computing Machinery 13, 7, pp. 407–14, July 1970.
  "LAP6 is an online system running on a 2048 word LINC which provides
  full facilities for text editing, automatic filing and file
  maintenance, and program preparation and assembly. ... The small
  memory has had surprisingly little effect on the functional
  specification of the system ... and perhaps operated with a positive
  effect on the criterion of simplicity. Compromises were, of course,
  necessary, but we also found that operating features which may seem
  highly desirable, for example, to a professional in the computer
  field, can be so much excess baggage in an on-line applications
  environment. ..."

  http://www.digibarn.com/stories/linc/documents/LINC-Mary-Allen-Wilkes/Scroll-Editing-Proc.-IEEE.pdf - Scroll Editing: an on-line algorithm for manipulating long character strings, 
  IEEE Trans. on Computers 19, 11, pp. 1009–15, November 1970.
  Describes the ingenious virtual memory scheme: "An algorithm that
  runs on a 2048-word LINC provides efficient on-line editing of
  character strings virtually unlimited in length. Fixed-address LINC
  tape holds the character sequence in the manner of a scroll. Edited
  characters are spliced directly in or out of the scroll as it moves
  across a display scope under the viewer's control. A 512-character
  "playground" created at the splice point provides sufficient ease to
  permit changing the scroll contents dynamically..."

17 Feb 2019

- https://github.com/hundredrabbits/Orca - Live Programming Environment -
  via https://news.ycombinator.com/item?id=19118951 - "What is it?
  What does it do? Why would I use it?"
  "This isn't really that kind of piece of software. It's a work of art ...
  open it up and play around and you might find something worthy of delight."
  "Think cellular automatons combined with PD/MaxMSP. ...
  There are nodes to generate data (counters, timers, etc.), nodes that have
  state and nodes that are sinks (OSC and MIDI). ... It's fun."

  "Orca is just one piece of the world that this guy has been building at
  https://wiki.xxiivv.com/#home
  He's got a suite of tools: Left, Dotgrid, Ronin, Marabu (text, graphics,
  super-graphics, audio).
  Then a logging/personal wiki setup that I think is fascinating: Nataniev,
  Horaire, Oscean. Which goes all the way down to his own database formats and
  time format.
  The philosophy and aesthetic of his work is awesome in the completeness of
  associated art and the connection between the build-up of his own software
  ecosystem."

14 Feb 2019

- http://sunnyday.mit.edu/16.355/syllabus-355-2017.html - *System Engineering
  of Software-Intensive Systems* - course at MIT by safety expert
  Nancy Leveson: "Note that the class is a system engineering of software class,
  not a standard software engineering class and as such will not provide basic
  training in programming or in specific approaches or tools for developing
  software. ... Instead of a textbook, required reading will consist of a
  carefully selected set of historically important and foundational papers
  as well as some more current ones. Some papers will be technical while others
  will be opinions or essays. The literature is vast, and papers have been
  selected for their historical relevance in the development of the field or
  for their ability to help you critique the assumptions underlying current
  software/system engineering dogma.  ... There will be no programming
  assignments. ...  most assignments will involve evaluation and interpretation
  rather than practice in applying particular techniques or tools. ..."

  http://sunnyday.mit.edu/16.355/ Readings and class notes

14 Feb 2019

- http://www.1-9-9-1.com/ - *1991 - A server-side web framework written in Forth*
  "The year is 1991. The World Wide Web has just seen public release.
  *1991* looks to ease your interactions with the new web using cutting edge
  programming techniques in Forth (well, Gforth). ...

  'You're using Gforth, which came out in 1992. Also, it's 2017.'
  Okay. But Fredric Jameson establishes that in postmodernism we have experienced
  a weakening sense of historicity such that what is, what was, and what will
  be all exist as presents in time. 1970, 1991, 1992, and 2017 all happen
  simultaneously. Hence developers working on new projects while still coding
  in decades-old text editors. They write the future in the past and are made
  present in so doing."

  via https://news.ycombinator.com/item?id=19146767 -
  "A microframework in a scant 480 lines of code, plus a postmodern manifesto ..."

 9 Feb 2019

- https://news.ycombinator.com/item?id=19122578 comment by Ron Garret on
  https://kirit.com/Build%20me%20a%20LISP  "... An S-expression is a
  *serialization* of a (single) cons cell, whose elements might be other cells.
  ... The fact that S-expressions represent cons cells and NOT vectors is crucially
  important. It is the feature from which Lisp derives much of its power.

  It is possible to make a Lisp-like language where the surface syntax
  represents vectors instead of cons cells. In fact, this makes a useful
  exercise.
  If you undertake this exercise you will come to know the answer to the
  question: why has this idea (a vector-based Lisp) not gained
  more wide-spread adoption?

  ... S-expressions are not a data type, they are a serialization of cons cells,
  i.e. they are a *mapping* between cons cells and strings, and this mapping
  has a very particular feature from which much of Lisp's power is derived,
  which is that it compresses a linked list of cons cells into this:
  *(1 2 3 4)* instead of this *(1 . (2 . (3 . (4 . nil))))*

  ... What this (linked) article is describing is similar in
  spirit to Lisp, but it's not Lisp. It's a different (toy) language at a
  completely different point in the design space."
  
25 Jan 2019

- https://github.com/ktye/iv - APL interpreter and stream processor - 
  "Next tasks: ... learn APL ... The author has never used APL ..."
  via https://news.ycombinator.com/item?id=18997977 -
  "Of course it takes less time and effort to write an APL interpreter
  than it does to actually learn APL."

 4 Jan 2019

- https://news.ycombinator.com/item?id=14852625 - comments on the book *Thinking Forth* - 
  "For me the biggest influences underemphasized in other sources are
  to be alert for relentless simplification, for 'mechanical
  sympathy', for ways changing your problem could make it much simpler
  to solve -- and that there's an agility in using a simpler
  programming system like a Forth which you grok and can change as you
  need to, which can sometimes outweigh the leverage of a big one that
  comes with lots of stuff already done for you. These are useful
  points of view even with Forth being almost never the most practical
  tool now. ..."

  Also https://news.ycombinator.com/item?id=12713797 "... Good Forth
  programmers appear to solve hard problems by ruthlessly stripping
  away everything irrelevant from the problem to end up with an easy
  one. ..."

22 Dec 2018

- https://smallstep.com/blog/everything-pki.html - Everything you
  should know about certificates and PKI but are too afraid to ask -
  "Certificates and PKI (Public Key Infrastructure) are built on public
  key cryptography ... which uses key pairs. A key pair consists of a
  public key that can be distributed and shared with the world, and a
  corresponding private key that should be kept confidential by the
  owner.  There are two things you can do with a key pair: 1. You can
  encrypt some data with the public key. The only way to decrypt that
  data is with the corresponding private key.  2. You can sign some
  data with the private key. Anyone who knows the corresponding public
  key can verify the signature, proving which private key produced it.
  ... Verifying (my) signature is good evidence you’re talking to
  me. This effectively allows computers to see who they’re talking to
  across a network.

  Public key cryptography is a magical gift from mathematics to
  computer science.

  What if you don’t already know my public key? That’s what
  certificates are for.  ... A certificate is a data structure that
  contains a public key and a name. The data structure is then
  signed. The signature binds the public key to the name. The entity
  that signs a certificate is called the issuer (or certificate
  authority) and the entity named in the certificate is called the
  subject.  ... if you know (the issuer’s) public key you can
  authenticate (the certificate) by verifying the signature. ... Thus,
  certificates let you use (your) trust (of the issuer), and knowledge
  of an issuer’s public key, to learn another entity’s public key. ..."

- https://robertheaton.com/2014/03/27/how-does-https-actually-work/ -
  "HTTPS takes the well-known and understood HTTP protocol, and simply
  layers an SSL encryption layer on top of it.  The SSL layer has 2
  main purposes: 1. Verifying that you are talking directly to the
  server that you think you are talking to 2. Ensuring that only the
  server can read what you send it and only you can read what it sends
  back. (When) contact has been established, the server has to prove
  its identity to the client. This is achieved using its SSL
  certificate.  The client checks that it either implicitly trusts the
  certificate, or that it is verified and trusted by one of several
  Certificate Authorities (CAs) that it also implicitly trusts.
  Much more about this shortly. ...

  ... certificates are completely open and public, so any attacker
  could grab Microsoft’s certificate, intercept a client’s request to
  Microsoft.com and present the legitimate certificate to it. The
  client would accept this and happily begin the handshake. However,
  when the client encrypts the key that will be used for actual data
  encryption, it will do so using the real Microsoft’s public key from
  this real certificate. Since the attacker doesn’t have Microsoft’s
  private key in order to decrypt it, they are now stuck. ...  

  Order is maintained as long as the attacker doesn’t control a
  trusted certificate’s private key. If the client is somehow tricked
  into trusting a certificate and public key whose private key is
  controlled by an attacker, trouble begins.

  Can my company monitor my HTTPS traffic over their network?  If you
  are also using a machine controlled by your company, then
  yes. Remember that at the root of every chain of trust lies an
  implicitly trusted CA, and that a list of these authorities is
  stored in your browser. Your company could use their access to your
  machine to add their own self-signed certificate to this list of
  CAs. They could then intercept all of your HTTPS requests,
  presenting certificates claiming to represent the appropriate
  website, signed by their fake-CA and therefore unquestioningly
  trusted by your browser. Since you would be encrypting all of your
  HTTPS requests using their dodgy certificate’s public key, they
  could use the corresponding private key to decrypt and inspect (even
  modify) your request, and then send it onto it’s intended
  location. ... Incidentally, this is also how you use a proxy to
  inspect and modify the otherwise inaccessible HTTPS requests made by
  an iPhone app (link)."

- https://robertheaton.com/2018/11/28/https-in-the-real-world/ -
  "... Desperately holding these attackers at bay are nothing more than
  the raw power of HTTPS and a handful of trusted Certificate
  Authorities (CAs) run by incorruptible treefolk who live in the
  mountains. ... We’ll see how PKI addresses the facts that 1) your
  own private key might not stay private; 2) your Certificate
  Authority’s private key might not stay private; and 3) Certificate
  Authorities are not actually staffed exclusively by incorruptible
  treefolk who live in the mountains. ..."

14 Dec 2018

- https://humane.computer/in-conversation-with-aza-raskin/ - Interview
  about Archy https://github.com/DanielFeichtinger/Archy, also at
  11-19 Oct below. "You can think of applications as walled cities —
  they have to develop all of their own infrastructure. ... it’s the
  application as a framework which is broken. You want to tear it
  apart and just have functionality that you can use anywhere."
  "There were no files, because the best label for a file is the file
  itself, the content of it. Everything was in one long, conceptual
  document ... what you want is to have all of your content and work
  projects stored spatially. ... a full-on zooming user-interface
  (ZUI), ...no matter where you are you can zoom out and grab your
  bearings, and zoom in ad infinitum, a much better way of doing
  folders and taxonomies."  Hmnn ...  ".. any bit of text can refer to any
  other bit of text, and you can run any command and do any
  functionality from anywhere, that you could open up your tools and
  it was all coded in the same environment, that you were making in,
  very Smalltalk or Alan Kay-like, and so your tools themselves can be
  modified in real-time to modify themselves if need be."

- https://www.fugue.co/blog/2015-11-11-guide-to-emacs.html - Recreates
  Archy-like philosophy and workflow in emacs, including some
  customizations: "Ace Jump Mode ... works a bit like Jef Raskin's
  Leap feature from days gone by."  Explicitly references Archy's
  predecessor, the Canon Cat (see 11-19 Oct below).

 6 Dec 2018 

- https://www.newyorker.com/magazine/2018/12/10/the-friendship-that-made-google-huge  - Profile of Jeff Dean and Sanjay Ghemawat, 
  the pair programming team that created MapReduce, TensorFlow, and
  much more.  Story by James Somers, whose style here recalls John
  McPhee.  Somers is a programmer himself, and a prolific writer with
  a bountiful web site: http://jsomers.net/

27 Nov 2018

- https://news.ycombinator.com/item?id=18525800 - comment on Lisp
  Machine Inc. K-machine by jolmg - "In any case, looking at Lisp OSes
  vs Unix OSes, there is a design dichotomy where both options have
  great advantages. Anyone correct me if I'm wrong, but I understand
  Lisp OSes chose to have the whole OS work in a single high-level
  language, which allows a very natural coupling between programs,
  basically destroying the distiction between whole programs and
  program functions. On the other hand, Unix OSes chose to have a very
  unassuming framework for programs that would best support a great
  diversity of programming languages so that they could best
  interoperate despite the fact that they could work via very
  different semantics. This structure, as we all know, consists around
  the semantics of files which could be thought of as global
  variables, plain text arguments as very unassumming (untyped and
  with no predefined arity) function call arguments, standard input,
  output, and error as lazily-evaluated function arguments, and
  environment variables which could be thought as dynamically-scoped
  variables."

- https://www.gocomics.com/nancy/2018/04/09 - Nancy - Contemporary take
  on the ancient comic strip by a new cartoonist:
  https://www.vulture.com/2018/11/new-nancy-cartoonist-olivia-jaimes.html

23 Nov 2018

- http://www.jfsowa.com/computer/memo125.htm - Memo 125 by John
  F. Sowa, on IBM's proposed but unbuilt Future System of the 1970s -
  "The external interface of an operating system is not something
  tangible like a pay stub, but rather a set of interfaces that form
  the innermost level of other programs. ... such as editors,
  compilers, and query facilities. ... The design of these (other
  programs) may be called the *secondary architecture* to distinguish
  it from the heart of the operating system, which constitutes the
  *primary architecture*.  The primary architecture of an operating
  system comprises the following seven areas: Resource allocation,
  process creation, (etc.) ... These seven items form a closed
  list. ... they are interdependent and cannot be designed by isolated
  groups working in far-flung locations, nor even by different
  departments working on separate floors of the same building.  By
  contrast, the secondary architecture is an open-ended list ...  Once
  the primary architecture is firm, the secondary facilities can be
  designed and implemented by groups at opposite ends of the earth
  with a low level of intercommunication."

  "(The proposed OS), in its present state, has guidelines for the
  human factors of using displays, but it lacks a primary architecture
  that determines what kinds of operations are possible. ...  the
  slogan "display-oriented" is dangerous because it focuses on an
  external device, whose support is part of the secondary
  architecture, and overlooks the question of what properties the
  primary architecture must have to support a truly interactive
  system. ... (such as) an on-line symbol table, dynamic resource allocation,
  and a modifiable run-time environment.  ... if it doesn't (have
  those properties), it can never be more than a batch system with
  displays attached."

20 Nov 2018

- http://homepages.cs.ncl.ac.uk/brian.randell/NATO/ - The NATO
  Software Engineering Conferences - "In the fall of 1968 and again
  the in fall of 1969, NATO hosted a conference devoted to the subject
  of software engineering. ... The motivation for these conferences
  was that the computer industry at large was having a great deal of
  trouble in producing large and complex software systems. ... the
  conference reports have gained a certain amount of classical
  aura. ... I felt that the time had come to make them widely
  available, if for no other reason than to let the current generation
  know what the state of the art was in the late 1960's."  PDFs of
  both reports, a new introduction, a memoir by an original
  participant/editor, and photos.

22 Oct 2018 

- https://news.ycombinator.com/item?id=18267445 - An immersive
  programming experience - "I've found a good way to approach
  Smalltalk systems like Pharo and Squeak is to remember they're
  *whole systems*, not just languages with a bolted-on IDE.  I like to
  think of each running instance as more akin to a Unix virtual
  machine than anything else. ..." "... The globals dictionary and
  class variables etc are roughly analogous to the filesystem. ..."
  Much discussion of using an image-based rather than file-based system.

- https://news.ycombinator.com/item?id=18274235 - Hardware Interrupts - 
  "... interrupts are a pretty old concept as far as i know. I'm
  curious if there is anything that would replace them?"  Many
  suggestions, including "You could get rid of interrupts if you take
  a completely different approach to CPU architecture. ... something
  that is driven by data. ... On every cycle, the CPU would look at
  any new data that has arrived and process it accordingly. In this
  view, key-presses or timer ticks would just be like any other data
  flowing through the system."

19 Oct 2018

- https://news.ycombinator.com/item?id=18256690 - (Common Lisp is) A
  language designed for modifying programs while they
  run. ... Consider the Common Lisp generic function
  UPDATE-INSTANCE-FOR-REDEFINED-CLASS. It's in the language
  standard. ... You don't want to have to stop the program and rebuild
  it just because you redefined a class. ... telling the Lisp new
  definitions as it runs is the standard way that you normally work."

- https://news.ycombinator.com/item?id=18228740 - "Is there a modern
  “power on to basic” computer, for kids to learn on?"  Over 300 responses.

- https://news.ycombinator.com/item?id=18236396 - "What's your
  favorite elegant/beautiful algorithm?"  Over 400 responses.

11-19 Oct 2018

- https://www.exolymph.news/2017/07/27/alternate-computer-universes/ -
  "The Macintosh began as a variant on the dedicated word processor
  ... The normal way to program it is by writing code directly into
  your text document and highlighting it — upon which the language
  will be identified, it will be compiled, and the code will become a
  clickable button that when clicked is executed. In other words, it’s
  a system optimized for ‘literate programming’."
  Article reprinted at https://medium.com/@enkiv2/alternate-computer-universes-jef-raskins-macintosh-1a3f19b9110a.  

- http://www.canoncat.net/cat/Cat%20Work%20Processor.pdf - "The user
  interface was based on a simple text editor in which all data was
  seen as a long stream of text broken into pages, which could also be
  broken into documents. ... the disk was simply an image of the
  memory ... the Cat had no concept of files.  ... This feature
  allowed users to transfer their entire Cat environment ... by just
  taking their disk from one Cat and inserting it into another ..."
  https://news.ycombinator.com/item?id=6978587 - "There's something
  elegant about its lack of silos: all of your (textual) data is in
  one space that you leap around with the aid of dedicated search
  forwards/backwards keys, reprogramming or extending the system
  itself is likewise a keystroke away."  Details at
  https://ia600206.us.archive.org/30/items/TechnicalDocumentationForTheCanonCatEditorSep88/Technical_Documentation_for_the_Canon_Cat_Editor_Sep88.pdf
  via https://archive.org/details/jefraskin

  https://en.wikipedia.org/wiki/Archy and
  https://github.com/DanielFeichtinger/Archy "All content in Archy is
  persistent. This eliminates the need for, and the concept of, saving
  a document after editing it. ... Command names can be inserted and
  executed at any place in the interface ... Since a command can be
  used anywhere, applications are obsolete as the core of the
  interface's design. Installing a new package of commands provides a
  functionality ... not restricted to ... a single application
  ... (they) can be used system-wide ..."
  https://news.ycombinator.com/item?id=6978587 "... my main work tool
  is pretty much a copy of the Cat on modern hardware ... the (editor)
  I'm using now is Archy ... It's pretty much a copy of the Canon Cat,
  rewritten in python."

 9 Oct 2018

- http://antirez.com/news/74 - Fascinating little programs - "Why is
  it so great to hack a small piece of code? ... It can be totally
  understood, dominated. You can use smartness since little code is
  the only place of the world where coding smartness will pay off,
  since in large projects obviousness is far better in the long
  run. However I believe there is more than that, and is that small
  programs can be perfect. ... maybe there is still something to
  preserve from the ancient times where software could be perfect, the
  feeling that what you are creating has a structure and is not just a
  pile of code that works."  See also his http://antirez.com/news/108
  Writing an editor in less than 1000 lines of code

 7 Oct 2018

- http://obsolescence.wixsite.com/obsolescence/pidp-11 - "The PiDP-11
  is a modern replica of the PDP-11/70.  Introduced in 1975, the 11/70
  was top of the line in the famed PDP-11 range, and the very last
  system with a proper front panel. ..."  Comments in
  https://news.ycombinator.com/item?id=18124861 "It just goes to say
  that current systems lack something.  We cannot always put the finger on
  what it is and backtrack to where we think times were better. Using
  these machines is the closest real thing to going back in
  time. ... We cannot bring them back today and use them as primary
  systems because we don't have the context that need those
  machines. They are doomed to be played a little and to be sent back
  to attic." Another commenter responds "The exercise of traveling
  back in time is often not as much as to use the machines for actual
  work, but to experience them as tools to learn about the context
  where they existed ... to (re)learn the lessons others learned
  before us that we can still benefit from."

 1 Oct 2018

- https://news.ycombinator.com/item?id=12250857 - "... Are there any
  other noteworthy, older computer technologies that are in some ways
  superior to current technologies?"  Several long responses,
  describing some different systems than the recent thread on historic
  OS: https://news.ycombinator.com/item?id=10114460

- https://github.com/terkelg/awesome-creative-coding - "Creative
  coding is a different discipline than programming systems. The goal
  is to create something expressive instead of something functional."
  via https://github.com/sindresorhus/awesome

29 Sep 2018

- https://solar.lowtechmagazine.com/2018/09/how-to-build-a-lowtech-website/ - "The new blog is designed to radically reduce the energy use
  associated with accessing our content. ... Thanks to a low-tech web
  design, we managed to decrease the average page size of the blog by
  a factor of five compared to the old design – all while making the
  website visually more attractive (and mobile-friendly). Secondly,
  our new website runs 100% on solar power, not just in words, but in
  reality: it has its own energy storage and will go off-line during
  longer periods of cloudy weather. ..."  Lots of details about DIY
  solar panels + batteries + tiny server computer + page design.  Interesting
  graphic design too.  via
  https://news.ycombinator.com/item?id=18075143

24 Sep 2018

- https://mprove.de/diplom/gui/Kay75.pdf - "Personal Computing by Alan
  Kay" (1975) - Early explanations of the Alto computer and Smalltalk
  language, including motivation and rationale, with descriptons of
  programs written by adults and especially children. "The 'pocket universe' (a
  metaphor we like) needs an epistemology if not a
  metaphysics. ... The basic principle of recursive design is: make
  the *parts* have the same power and capabilities as the
  *whole*. ... It is interesting to note that none of the *parts* of
  most programming languages, 'data structures', 'functions', and
  'control structures', have the same power as the *whole*, instead
  they are *dilutions* of the idea of the computer."

  Via https://news.ycombinator.com/item?id=18044785 - "What happened
  to this future?  I miss it."

19 Sep 2018, 27 Apr 2020

- http://doc.cat-v.org/plan_9/misc/ubiquitous_fileserver/ubiquitous_fileserver.pdf - 
  "The Ubiquitous File Server in Plan 9 ... 
  the design of a given component, whether device driver, system
  service or application, often begins by designing a suitable name
  space, at a level of abstraction above that of (say) the API for any
  particular programming language. In other words, in Plan 9, the name
  space provides the focus for design.  We look at a reasonable
  collection of examples ... network interfaces: Plan 9 does not
  provide special ‘socket’ system calls to access networks. Instead,
  devices, interfaces, protocols and services are all represented by
  file trees, conventionally collected together under /net. (Details
  follow) ... (Other examples include) domain name service ...  connection
  service ... mail boxes ... authentication ... window managment ...
  storage formats ... The exposing of data interfaces through the name
  space has a further advantage. ... ordinary system commands can
  operate on it, including *ls*, *cmp*, and *cp*.  ... The server is
  often tested using shell commands or shell scripts ..." 

  Also, any server can be used *ad lib* just by typing *echo* or *cat*
  commands at the shell prompt.  This 18-page paper is the most thorough
  explanation of Plan 9 I have seen.

- https://news.ycombinator.com/item?id=21712072 -
  "You have to think about 9p as an RPC protocol with files representing
  objects ... Reading/writing those files is how you interact with said
  objects. This is why you can do a lot of neat tricks using just a shell
  script as you can directly interact with a program using a standardized
  interface. No other operating system can claim such a high level of
  homogeneity.

  As a hypothetical example, take the game Doom. We modify it to serve a
  file system to expose all of the players stats as a file tree. So a file
  called *health* is an rpc call to read and write the players health. This
  means you can *'% echo 100 >/n/doom/player/health'* to set your health to
  100. It also means you eliminated the need to reinvent the wheel and
  integrate a console shell in the game. ... Now we can use shell
  scripts or helper programs to interact with the game. And they can be in
  any language as all they have to do is *open(/path/to/file)* and *read()*
  *write()*. Imagine how much code you can eliminate and how much
  flexibility you gain by exposing your programs innards in such a
  standard manner? ... 

  The level of flexibility is intoxicating and I don't care if it doesn't
  play youtube ..."

- https://news.ycombinator.com/item?id=21709950 -
  "So like the window manager is manipulated by creating fake files (fake
  as in they don't exist in any persistent storage device) and writing
  text to them that describes the state of the windows. Rather than
  *socket()* and *setsockopt()*, under the hood it's opening something
  like  */dev/net/tcp/google.com/80/ctrl* and reading and writing text
  about the  state of the connection.   

  Because of this the whole system is introspectable via *cat*ing
  interesting files."

- http://doc.cat-v.org/plan_9/misc/dead_OSes_still_matter/login.pdf -
  "Why Some Dead OSes Still Matter - Plan 9 does not have an
  equivalent to the *ioctl()* system call, which cannot be isued
  across a network owing to the reliance on a local pointer to pass
  data.  Instead most servers by convention serve a file named *ctl*
  at the top of their hierarchy, which allows clients to control not
  only I/O but the general behavior of the servers."  

  Comments in https://news.ycombinator.com/item?id=10114460 including
  a roll call of other historic OS, links.

- http://doc.cat-v.org/bell_labs/the_hideous_name/the_hideous_name.pdf - "The Hideous Name - 
  ... the UNIX file system contains objects that are not ordinary
  files.  Simply by having ordinary file names, though, these objects
  have ordinary file properties such as protection. ... standard
  software can provide services for them that would otherwise require
  special handling. ... When machines are connected together, their
  name spaces may be joined to facilitate the sharing of files.  If
  the name spaces have the same clean structure, that structure can be
  extended simply to describe the larger space."

15 Sep 2018

- https://github.com/arwn/9front-paper/blob/master/paper.pdf - Using
  9front - "Why would anyone want to use 9front? Well chances are you
  don't. On the strange off-chance that you do end up using it you'll
  be greated with confused looks and open arms by the community, or
  rather, lack of community. ... After booting your 9front machine you
  should be greeted with a drab looking gray screen. Congratulations,
  You've made a terrible decision."   

  See also http://fqa.9front.org/

- http://blog.fogus.me/2011/05/03/the-german-school-of-lisp-2/ -
  "*Fluchtpunkt* Lisps skirt the vanishing point between theory,
  practicality, and art. ... (examples include *T* and *Pico Lisp*)
  ...  Fluchtpunkt Lisps are Focused: Uncompromising in their vision,
  Spartan: Devoid of the seemingly unnecessary comforts found in many
  modern languages, Controversial: Not always by design, but often
  because of their design, Fun.

12 Sep 2018

- https://news.ycombinator.com/item?id=11796650 - Harvey OS – A Fresh
  Take on Plan 9 - "Unix wrinkles: there are so many, but just
  consider the sockets interface. Sockets completely break the Unix
  model of named entities that you can open and close and read and
  write. Sockets don't have names and are not visible in the file
  system. It's a long list of what they got wrong and that's why, in
  1978, other mechanisms were proposed (if you're willing to dig you
  can find the RFC and you'll see ideas like /dev/tcp/hostname and so
  on). But to our dismay (I was there at the time) the current BSD
  socket interface won. Many of us were disappointed by that decision
  but it was the fastest way to get network support into Unix."

  See also https://github.com/Harvey-OS/harvey

11 Sep 2018

- https://morepypy.blogspot.com/2018/09/the-first-15-years-of-pypy.html - 
  "Originally ... it was more meant as a kind of executable
  explanation of how Python works ...  But pretty soon there were
  then also plans for how the virtual machine (VM) could be
  bootstrapped to be runnable ..." "The use of RPython for other
  languages complicated the PyPy narrative a lot, and in a way we
  never managed to recover the simplicity of the original project
  description "PyPy is Python in Python". Because now it's something
  like "we have this somewhat strange language, a subset of Python,
  that's called RPython, and it's good to write interpreters in. And
  if you do that, we'll give you a JIT for almost free. And also, we
  used that language to write a Python implementation, called
  PyPy.". It just doesn't roll off the tongue as nicely."

  The original vision of a pedagogical Python in Python has recently been
  realized by others in *Byterun* and *Tailbiter*:
  http://aosabook.org/en/500L/a-python-interpreter-written-in-python.html and
  https://codewords.recurse.com/issues/seven/dragon-taming-with-tailbiter-a-bytecode-compiler

 5 Sep 2018

- https://news.ycombinator.com/item?id=17910632, comments on
  https://tinyletter.com/jamesbowman/letters/upduino-a-9-99-fpga -
  "Can someone explain why someone would choose an FPGA over a
  standard microprocessor? What advantages could this UPDuino have
  over an Arduino? Also, how do ASIC's figure into this comparison?"
  and, "How does one go about developing on an FPGA ...?"  Many
  detailed answers, also many suggestions for FPGA projects.  Also,
  "Can this run a RISC-V core? ... Yes, it can:"
  https://github.com/grahamedgecombe/icicle and
  https://github.com/cliffordwolf/picorv32

31 Aug 2018

- https://dl.acm.org/citation.cfm?id=806447 - "Z - The 95% Program
  Editor (1981) ... Z is the production editor in the Yale Computer
  Science Department ... developed using the Yale BLISS programming
  (language) environment for TOPS-20 (operating system for
  DECSystem-20)".  Provides much functionality similar to the Emacs of
  that era, but with a completely different command language and
  internals, and most significantly, "Rather than develop our own
  specialized macro or programming language to support user
  extensions, we felt it way better not to provide the feature at
  all."  This paper tells how to implement many features for editing
  programs in several languages that "would seem to require the
  existence of a parse tree", but instead use only "a simple
  table-driven lexer (that) takes a line of text and divides it into
  (a few) categories" and "by making a very simple assumption about
  how a programmer formats his program."

29 Aug 2018

- https://github.com/darklife/darkriscv - "Open source RISC-V
  implemented from scratch in one night! ... the code is very compact,
  with around two hundred lines of Verilog ... my target is the
  ultra-low-cost Xilinx Spartan-6 family of FPGAs ... the performance
  of 75MIPS is good enough for me."  Via
  https://news.ycombinator.com/item?id=17852876 "... a very incomplete
  implementation. ... The fact that this is RISCV is somewhat of a red
  herring as you could do a similar thing with a restricted subset of
  MIPS or ARM or even x86 ..." BUT author answers: "although 25% of
  RV32I instruction set is missing in my implementation, there is no
  side effect, ... since the gcc
  generates by default exactly the implemented subset and nothing
  more. I think this is a very important advantage in the RISCV
  architecture when compared with others and I dont think the gcc will
  have the same benevolent behaviour in the case of ARM or x86."

27 Aug 2018

- http://stevelosh.com/blog/2018/08/a-road-to-common-lisp/ - "I want
  you to realize that Common Lisp is a stable, large, practical,
  extensible, ugly language."  Via
  https://news.ycombinator.com/item?id=17852194  "This is a
  godsend. Probably the best introductory article on Lisp to date."

 8 Aug 2018

- https://twobithistory.org/2018/08/05/where-vim-came-from.html - "Vim
  is only the latest iteration of a piece of software—call it the "wq
  text editor”—that has been continuously developed and improved since
  the dawn of the Unix epoch."  History of *qed*, *ed*, *ex*, *vi*, *vim* and
  other editors, with links to more detailed histories of several.
  More articles at https://twobithistory.org/timeline.html "This is a
  blog about computer history intended primarily for computer people."

 3 Aug 2018

- https://www.mnot.net/blog/2018/07/31/read_rfc - How to Read an RFC -
  "Requests for Comments (RFCs) are how we specify many protocols on
  the Internet. These documents are alternatively treated as holy
  texts ... then shunned as irrelevant because they can’t be
  understood. ... with some insight into how they’re constructed and
  published, it’s a bit easier to understand what you’re looking
  at. ... I currently co-chair the IETF HTTP and QUIC Working Groups,
  and am a member of the Internet Architecture Board."  In addition to
  the sites linked in this article, https://pretty-rfc.herokuapp.com
  provides the RFCs in a more navigable HTML format.

31 Jul 2018

- https://news.ycombinator.com/item?id=17607095 - "Where can
  one learn about the history of the internet ... ?"  Many links, for
  example http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf
  summarized here:
  https://blog.acolyer.org/2015/01/22/the-design-philosophy-of-the-darpa-internet-protocols/
  Several posts recommend this:
  https://www.coursera.org/learn/internet-history

- https://news.ycombinator.com/item?id=17642846 - Hello World on z/OS - Comments 
  on this article about a novice trying to program a
  mainframe, by many others with more experience:
  https://medium.com/@bellmar/hello-world-on-z-os-a0ef31c1e87f "And
  yes, ... I am an IBMer, working in a z/OS product that's over 40
  years old" "z/OS, TSO, JCL and the rest are different to what most
  people are used to but this is where modern IT started, where
  virtualisation, high availability and serious backward compatibility
  were invented."

24 Jul 2018

- http://exofrills.org/ - "xo - the text editor without frills ...
  designed to just provide the features that you need to program
  effectively and nothing else. It is ridiculously lightweight and
  only relies on Python 3, *urwid*, and *pygments*. Less than 850
  lines of code in a single file! ... If you ask for more features *I
  will probably say no!*  Just fork xo yourself."
  https://github.com/scopatz/xo

16 Jul 2018

- https://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1012.html -
  "Roughly speaking, there are two ways in which people try to reason
  about programs; I shall distinguish them as “the postulational
  method” and “the operational method”. ... The tragedy of today's
  world of programming is that, to the extent that it reasons about
  programs at all, it does so almost exclusively operationally. ..."
  Don't miss the version in Dijkstra's handwriting at
  https://www.cs.utexas.edu/~EWD/ewd10xx/EWD1012.PDF See also
  https://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1073.html
  (or .pdf) for some short examples of mathematics in the form he
  advocates.  See
  https://www.cs.utexas.edu/~EWD/transcriptions/EWD13xx/EWD1300.html
  for a lengthy rationale for this form.  Much much more at
  https://www.cs.utexas.edu/~EWD/welcome.html

- http://www.ams.org/notices/201201/rtx120100031p.pdf - A Revolution
  in Mathematics? by Frank Quinn.  Similar argument to EWD1012 above,
  but from a mathematician, not a computer scientist. "The physical
  sciences all went through 'revolutions': wrenching transitions in
  which methods changed radically and became much more powerful.  It
  is not widely realized, but there was a similar transition in
  mathematics between about 1890 and 1930. ... The strangest
  difference is that the scientific revolutions were highly visible,
  while the significance of the mathematical event is essentially
  unrecognized. ..."

 6 Jul 2018

- https://basicengine.org/ - "The BASIC Engine is a very low-cost
  single-board home computer ... can be built at home ... for under 10
  Euros in parts. ... Check the one-hour silent video below to see how
  to build a BASIC Engine using a soldering iron, a heat gun,
  tweezers, solder wire and side cutters, without fancy tools, mad
  soldering skills and with only a minimal amount of patience." also
  https://basicengine.org/history.html - "The VS23S010D-L ... is a
  static RAM chip ... (that) comes with a video controller. ... It
  comes with 128 kB, some or all of which can be used as a frame
  buffer ... has a "block move" feature, more commonly known as a
  blitter. It allows you to copy sections of video memory ... provides
  a dramatic performance boost in ... text screen scrolling and
  rendering of tiled backgrounds."  Also
  https://github.com/uli/basicengine-firmware "The software is a
  heavily modified version of Toyoshiki Tiny BASIC
  https://github.com/Tamakichi/ttbasic_arduino/tree/ttbasic_arduino_ps2_ntsc
  " via https://www.metafilter.com/175123/62984-bytes-free. Recently
  noticed at https://news.ycombinator.com/item?id=17674944 "drive
  tiny, minimal CPUs to do amazing things at the edge of their
  specifications cause it's cool and fun"  "That is software
  defined broadcast television. Mind. Blown." Compare to Uzebox, 24
  May below.
  
- http://www.garbled.net/tmp/bringup.pdf - "Bringup is Hard
  ... Bringup is the initial stage of a new port of an Operating
  System to a new hardware platform.  Often, bringup is one of the
  most difficult things to learn how to do in OS programming. ..."
  Related:
  https://utcc.utoronto.ca/~cks/space/blog/linux/LinuxBootOverview - "A
  broad overview of how modern Linux systems boot ..."  Much more 
  at https://news.ycombinator.com/item?id=17340033

- https://rushter.com/blog/python-virtualenv/ - "... quick overview of
  internals behind popular virtual environments, e.g., virtualenv,
  virtualenvwrapper, conda, pipenv."

- https://www.partiallyapplied.com/blog/church/ - "Exploring Church
  Numerals with Python ... representing natural numbers as lambda
  calculus terms."  Also
  https://eli.thegreenplace.net/2016/some-notes-on-the-y-combinator/ -
  "... the Y combinator isn't something unique to the Lisp family of
  languages, here's a Python implementation. ..."

27 Jun 2018

- http://www.aholme.co.uk/6502/Main.htm - "Here, with full source
  code, is a cycle-accurate 6502 microprocessor core in Verilog HDL,
  which was automatically generated from a transistor-level netlist
  ...  The core runs 10 times faster than a real 6502 and occupies
  only 8% of the flops and 7% of the LUTs in the Xilinx xc3s500e FPGA
  on a Spartan 3E Starter Kit. ... The 6502 has been studied and
  reverse-engineered more than any other microprocessor ..." (reviews
  history, with some links).  via
  https://news.ycombinator.com/item?id=17399967 with more links about
  6502 and other 8-bit processors.

- https://leanpub.com/insidethepythonvirtualmachine/read - "Inside The
  Python Virtual Machine".  Long and detailed with lots of examples in
  C and Python byte code.  Finishes with an explanation of generators
  and how they are implemented.

- https://github.com/dylanaraps/pure-bash-bible - "... methods of
  doing various tasks using only built-in bash features ... remove
  unneeded dependencies from your scripts ... make them that little
  bit faster."  Also https://dmytrish.net/blog/en/bash-tcp - "bash can
  connect to TCP/UDP servers on its own, without using nc/telnet
  ... (by using) /dev/tcp/HOST/PORT" ... (example follows)

25 Jun 2018
  
- https://github.com/pervognsen/bitwise/ - "Bitwise is an educational
  project where we create the software/hardware stack for a computer
  from scratch. ... can be done much more simply and quickly than
  people realize if we strongly favor simplicity over marginal gains
  in feature completeness or performance. ... The first major project
  will be the C-like systems language compiler. ... On the hardware
  side of things, we will be designing a computer from scratch that
  can be synthesized and deployed on a real FPGA. This will include a
  RISC-V CPU ..."

14 Jun 2018

- https://bootstrapping.miraheze.org/wiki/Main_Page - "This wiki is
  about bootstrapping. Building up compilers and interpreters and
  tools from nothing."  Also
  https://speakerdeck.com/nineties/creating-a-language-using-only-assembly-language. "Let's play with limitations ..." 
  Both via https://news.ycombinator.com/item?id=17290573 - "The
  problem with this kind of site ... is that it could take years to
  review each item."
 
12 Jun 2018

- https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/ -
  What is code? by Paul Ford, much-praised 38,000 word essay with web
  animations etc. comprises entire June 11, 2015 issue of Bloomberg
  Business Week.  Also
  https://medium.com/interactive-mind/so-you-don-t-have-time-to-read-what-is-code-1da0e4529896
  "Here are some main takeaways, and then a full outline is below."
  https://news.ycombinator.com/item?id=17259483 - reviewed on HN three
  years later - "I don't think this really achieves what it sets out
  to do ... This seems more like "What is tech culture?" for people
  who are already a part of tech culture."
  https://www.theframeworkproject.com/interviews/paul-ford - author
  interview - "... should everyone learn to code? Everyone should seek
  to empower themselves to understand more about the world that
  they're in. Coding is not communicated as a path to that. It's
  communicated as a way to riches or a socioeconomic ladder."
  "... once things scale and lots and lots of human beings get
  involved, the fundamental crappy parts of human culture sort of
  start to permeate back through. Twitter's a great example. You
  couldn't have a more annoying bunch of do-gooders trying to create
  Twitter, and then the platform they create ends up having enormous
  issues ..."  "The tweets don't add up to a corpus. I miss
  that. ... When I was writing every day or blogging or doing weird
  code stuff, I could point back to months before when I had just not
  known something and now I knew something new and I created something
  new. And I don't feel that the platforms that we have today
  encourage people to create at that level."
  http://gawker.com/what-is-code-a-q-a-with-writer-and-programmer-paul-fo-1710884170 - another author interview - "... of course it’s too much. ... We
  just live in this bizarre land of plenty, and technology is just one
  of those things we have way too much of."

- https://rushter.com/blog/python-gil-thread-scheduling/ - Python's
  GIL implemented in pure Python - "I was trying to understand all the
  details of the GIL ... from the CPython's source code.  So here is a
  simplified algorithm of the thread scheduling that is taken from
  CPython 3.7 and rewritten from C to pure Python. ... Basically, the
  job of the GIL is to pause the while loop for all threads except for
  a thread that currently owns the GIL."

11 Jun 2018

- http://www.pong-story.com/LAWN_TENNIS.pdf - Atari Pong Circuit
  Analysis - Awesomely detailed, 106 pages. "Atari’s Arcade Pong PCB
  contained 66 IC’s. ... It was simply hard wired TTL logic and
  predates microprocessor and software controlled video games ... the
  game has also been emulated in software to play on computers. ... in
  most cases it is a poor facsimile of the real thing."  via
  https://news.ycombinator.com/item?id=17200163 "... an insanely
  clever masterpiece of digital design. ... It’s mindbendingly
  brilliant."  Compare to Uzebox with 2 ICs, 24 May 2018 below.

 3 Jun 2018

- https://web.archive.org/web/20110723033542/http%3A//www.burlingtontelecom.net/~ashawley/gnu/emacs/doc/emacs-1978.html
  An Introduction to the Emacs Editor by Eugene Ciccarelli, AI Memo
  No. 447, January 1978, Artificial Intelligence Laboratory,
  Massachusetts Institute of Technology (not the same as Richard
  Stallman's 1979 AI Memo 519 on Emacs,
  https://ia601004.us.archive.org/32/items/MITAIMemo519/MIT-AIMemo519.pdf).
  "This memo is aimed at users unfamiliar not only with the Emacs
  editor, but also with the ITS operating system. ...  Emacs runs on
  the ITS machines, AI, ML, MC, and DM.  For people coming from an
  Arpanet TIP, the host numbers are: 134 (AI), 198 (ML), 236 (MC), and
  70 (DM).  If you don't have a regular username there, ... (use) the
  WHOIS program: :WHOIS XYZ.  If WHOIS didn't find any regular user
  XYZ, you can use that name.  :LOGIN XYZ.  You are now talking to
  DDT, the top-level, monitor program ..."

 2 Jun 2018

- https://news.ycombinator.com/item?id=17194456 - comments on 'A few
  words on Doug Engelbart' by Bret Victor: "The failure to replicate
  Engelbart's vision of collaborative UI plagues me ... we can't even
  achieve the level of integration they had back in the 60s. ..."
  Much discussion of why Engelbart's prototype from fifty years ago --
  and his larger project to 'augment human intellect' -- remain
  mostly unrealized: "... Engelbart's system was a completely shared
  space in which everyone lived and was trusted, then of course our
  systems are inelegant by comparison. ..."

 1 Jun 2018

- http://obsolescence.wixsite.com/obsolescence/how-to-use-the-pidp-8 -
  Obsolescence Guaranteed - "The PiDP-8/I is a modern replica of the
  1968 PDP-8/I computer. ... behind the blinking lights sits a
  Raspberry Pi, running a modified version of SimH ... the idea was to
  illustrate how utterly unique the PDP-8 was in the evolution of
  computing. ... it was pretty much *the* prototype of a personal
  computer."

- http://computermuseum.informatik.uni-stuttgart.de/cm003_en.html -
  Computermuseum der Fakultat Informatik - photos and descriptions of
  scores of calculators, computers, peripherals, and associated test
  instruments from the 1950s - 1980s. "not all pages have been
  translated yet", use the deutsch page to see those pictures.  Uses
  typewriter font throughout - for that historical flavor?

- http://www.cap-lore.com/CapTheory/ - "Capability Theory by Sound
  Bytes ... This is a collection of insights for designing capability
  based systems. ... "  Many many links on capabilities and operating
  systems research crammed into a no-frills single page.

- https://github.com/nebulet/nebulet - "Nebulet is a microkernel that
  executes WebAssembly modules instead of ELF binaries. Furthermore,
  it does so in ring 0 and in the same address space as the kernel,
  instead of in ring 3." Also http://lsneff.me/why-nebulet/ "Operating
  system design has been somewhat stagnant since, well, ever.
  ... Nebulet lets us try ideas that have been left dormant again."
  via https://news.ycombinator.com/item?id=17187384

24 May 2018

- http://uzebox.org/wiki/index.php?title=Main_Page - Uzebox -
  "retro-minimalist homebrew game console. ... video sync generation,
  tile rendering and music mixing is done realtime by a background
  task ... easy and fun to assemble and program ... contains only two
  chips: an ATmega644 and an AD725 RGB-to-NTSC converter." Links to
  http://uzebox.org/files/wiki/uzebox_how_it_works_v10.pdf, 21 pages:
  "... ATMega644 ... 20Mhz ... 64K of flash and 4K of RAM. ... I
  couldn't get around insane cycle-counting for the kernel ...  Each
  and every (scan)line, including the sync code must take exactly 1820 clock
  cycles. ..."

21 May 2018

- https://www.pocketputer.com/ Pocket Puter - via
  https://news.ycombinator.com/item?id=17114515, "I want to create the
  information piece to make it possible for homeless individuals and
  others at risk of homelessness to use minimal tech, like a
  smartphone or tablet, to start addressing some of their problems. As
  one element of that, I explicitly want to support the ability to
  earn an online income, even with very minimal tech. ... I was able
  to earn money online while homeless and eventually get off the
  street."

- https://tools.ietf.org/html/rfc1, RFC1: Host Software by Steve
  Crocker, 7 Apr 1969.  "The software for the ARPA Network exists
  partly in the IMPs and partly in the respective HOSTs.  BB&N has
  specified the software of the IMPs and it is the responsibility of
  the HOST groups to agree on HOST software. ... I present here some
  of the tentative agreements reached and some of the open questions
  encountered."

20 May 2018

- http://kakoune.org/why-kakoune/why-kakoune.html - " ... in insert
  mode most keys insert their character in the buffer ... but in
  normal (default) mode, keys have a different effect (move, copy,
  paste, undo, open ...) ... non-modal text editors are extremely
  biased towards insertion. ... at the expense of making most other
  operations suboptimal ... vi basic grammar is verb followed by
  object ...  Kakoune’s grammar is object followed by verb ... you
  always see the current object (the selection) before you apply
  your change ...  vi treats moving around and selecting an object as
  two different things. Kakoune unifies that, moving is selecting. w
  does not just go to the next word, it selects from current position
  to the next word. ..."

18 May 2018

- https://www.scottaaronson.com/blog/?p=524 - "Timeline of computer
  science ... I somehow got roped into creating a timeline of “150
  major events in computer science history" ... I’m including my
  current draft list of 152 events below ... From the data, it would
  appear that the level of intellectual excitement in computer science
  peaked in the 1960s, and has steadily declined ever since, except
  for a bump in the 1990s coinciding with the Internet boom.  ..."

- http://blog.thelifeofkenneth.com/2017/11/creating-autonomous-system-for-fun-and.html
  "...  start thinking about the Internet ...  as a very large mesh of
  independent connected organizations instead of an abstract cloud
  ... Almost no one needs to consider the Internet at this
  level. ... you can probably pay someone else to provide it and don't
  need to sit down and learn how BGP works and what an Autonomous
  System is. But let's ignore that for one second, and talk about how
  to become your own ISP. ..."

- http://www.donationcoder.com/forum/index.php?topic=45547 - "The Acme
  editor on Debian on Windows ... Windows 10 has got support for being
  used as a host system for Linux applications ... this is the least
  inconvenient way to use Acme on Windows.  What we need is both an X
  server ... and a Linux distribution running on the Windows NT
  subsystem. ...  Here's how to install it. ... Try something new?
  Dive into history? Show off your weirdness to your friends? Do nerdy
  things with nerdy software? Acme has it."

14 May 2018

- http://www.tnhh.net/posts/bked-gui-as-tui.html - "BKED (pronounced
  buh-ked, e as in kept) was the de-facto text editor in Vietnam in
  the 80s-90s. ... BKED runs on MS-DOS and looks just like Microsft
  Editor aka edit.com, except for it displays and allows the user to
  input text in Vietnamese. ... it is a full-blown GUI that runs in
  Hercules/CGA/EGA/VGA graphics .... It draws every single pixel in
  its GUI with no acceleration ... It had to do it very quickly and
  economically – computers in Vietnam at the time were all old
  secondhand ones imported from the US recycling centers and
  such. ... it could also do quite sophisticated mathematical formulas
  and chart drawing. ... the editor was used to typeset the whole
  suite of national textbooks on every subject in the 90s."  Several
  screenshots in the article demonstrate the features.

13 May 2018

- https://bertfreudenberg.github.io/Smalltalk78/ - Smalltalk78 desktop
  running in the browser.  Looks very accurate but not clear how to
  work it on a mouse-less Macbook with a touchpad.  Via
  https://github.com/bertfreudenberg/Smalltalk78 "...  a Virtual
  Machine written in JavaScript to run a Smalltalk-78 snapshot in the
  web browser. To learn more, please read our paper ... (at)
  http://freudenbergs.de/bert/publications/Ingalls-2014-Smalltalk78.pdf"

10 May 2018

- https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
  Hyperlinks_in_Terminal_Emulators.md, "Hyperlinks (a.k.a. HTML-like
  anchors) in terminal emulators. Most of the terminal emulators
  auto-detect when a URL appears onscreen and allow to conveniently
  open them. ... It was, however, not possible until now for arbitrary
  text to point to URLs, just as on webpages. ..."

- https://github.com/junegunn/fzf - A command-line fuzzy finder -
  "It's an interactive Unix filter for command-line that can be used
  with any list; files, command history, processes, hostnames,
  bookmarks, git commits, etc. ..."  See also
  https://github.com/bling/fzf.el, "an Emacs front-end for fzf".

- https://news.ycombinator.com/item?id=17028491 - "Emacs. It's the
  "best of both worlds" combination of text-based interfaces and
  GUIs. It supports software that can be interactive, and yet also as
  interoperable as CLI applications ...", cites
  https://ambrevar.bitbucket.io/emacs-everywhere/ - "... any
  structure, interface element and even code can be passed around and
  combined between the different interfaces to various programs."  Via
  https://news.ycombinator.com/item?id=17026490, comments on
  https://ambrevar.bitbucket.io/emacs-eshell/

30 Apr 2018

- https://ericphanson.com/posts/2016/the-traveling-salesman-and-10-lines-of-python/
  Traveling Salesman solved by simulated annealing.  The ten lines of
  Python include two lines to draw a graph of the route.  Demonstrates
  matplotlib, numpy, random, math, and several comprehension and
  slicing idioms.  Nice page design: "This site created with the Tufte
  theme for Jekyll."

- https://www.pagetable.com/?p=774 - "Microsoft BASIC for 6502
  Original Source Code [1978] ... currently the oldest publicly
  available piece of source written by Bill Gates. ... developed on a
  PDP-10, using the MACRO-10 assembler. A set of macros developed by
  Paul Allen allowed MACRO-10 to understand and translate 6502
  assembly, albeit in a modified format to fit the syntax of macros.
  ... with all original comments, documentation and easter eggs ...
  6955 lines."  Via https://news.ycombinator.com/item?id=16938934,
  "What are some examples of beautiful x86 assembly code?"

26 Apr 2018

- https://www.gnu.org/software/guix/blog/2018/guix-on-android/ - Not
  really practical but provides a description of how Android is
  configured on top of the Linux kernel, with a photo of terminal
  running on a tiny phone.  "Android's root filesystem is actually the
  initramfs so any modification to its content will be lost after a
  reboot."

25 Apr 2018

- https://jeffreykegler.github.io/personal/timeline_v3 - "Parsing: a
  timeline", actually a short but dense review article from Panini in
  4th BCE then skipping to the early 20th century and on through 2012.
  Extensive bibliography with links.  Samples: "1991 ... On the
  written record, the discontent with LALR and yacc is hard to
  find. ...  But, by 1991, a movement away from LALR has already
  begun. Parsing practice falls back on recursive descent ..."  "2004:
  ... PEG takes the old joke that "the code is the documentation" one
  step further -- with PEG it is often the case that nothing documents
  the grammar, not even the code."

16 Apr 2018

- https://www.theverge.com/2018/4/16/17233946/olpcs-100-laptop-education-where-is-it-now
  "... the XO-1: a toylike green-and-white laptop with rounded edges,
  a swiveling “neck” instead of a standard hinge ...  Its screen
  folded into the keyboard to create a tablet ... Ear-like antennas
  flipped up to extend its Wi-Fi range ... hundreds of color
  permutations, so kids could tell their laptops apart. And a
  dustproof one-piece rubber keyboard made it easy to print any key
  layout." (Many large photos with the article show all this.)

  Comments at https://news.ycombinator.com/item?id=16849374 - "... the
  OLPC has *tremendous* industrial design, which nothing else I've
  ever seen matches." "... there still isn't a laptop that I've seen
  that is a durable as the XO. ... It came with a complete repair
  manual and you could use standard tools to take it apart and put it
  back together ..." "The OLPC organization seriously tried to make
  Alan Kay's Dynabook real ... they got in way over their heads ..."

  Earlier at https://news.ycombinator.com/item?id=13258261 -
  "... meant to come with ... a "View Source" button to let you
  inspect and edit the code to all your apps; UI making it easy to set
  up ad hoc networks to share/collaborate with anyone around you ..."

  See also http://laptop.org/8.2.0/manual/ - "There are no files,
  folders, or applications. ... Activities include an application,
  data, and history of the interaction that can be used to
  resume. ... Everything is saved automatically ... A Journal is used
  for accessing data. ... Some Activities allow users to work and learn
  cooperatively. For example ... to collaboratively create a document.

15 Apr 2018

- http://nymag.com/selectall/2018/04/an-apology-for-the-internet-from-the-people-who-built-it.html  - "To understand what went wrong — how the Silicon Valley dream of
  building a networked utopia turned into a globalized strip-mall
  casino overrun by pop-up ads and cyberbullies and Vladimir Putin — we
  spoke to more than a dozen architects of our digital present."

10 Apr 2018 

- https://github.com/adamisntdead/QuSimPy - "a toy multi-qubit quantum
  computer simulator, written in 150 lines of python", uses numpy and
  functools reduce, nice concise examples of complex matrices
  etc. https://news.ycombinator.com/item?id=16797193 - "... to
  simulate a basic quantum computer, all you need is the following: A
  product state vector, ... A set of common quantum logic gates, which
  are matrices you multiply against the product state vector ... The
  measurement logic, where you calculate how the product state
  collapses ... This project is an implementation of those three
  things in Python. There is nothing special about the above
  mathematical constructs save that they match the observed semantics
  of a quantum system." ... "Quantum Computation and Quantum
  Information, a.k.a "Mike and Ike" is the authoritative textbook
  ... very readable and beginner friendly. It's well worth reading the
  introduction to QC in the first twelve pages and skimming the first
  sixty."

 7 Apr 2018

- https://news.ycombinator.com/item?id=16775768 - "Raspberry Pi
  microSD card performance comparison" "I've tested the (several RPi
  rivals) and all of these boards are leagues beyond the Pi in terms
  of I/O performance (both networking and local storage). The problem
  is ...  these boards ... have a much worse initial onboarding
  experience (grabbing a disk image, flashing the card or onboard
  memory, first boot, then figuring out where to go next) than what
  you get with the Pi and it's handy, well-written tutorials."  That
  is the only reason that the Raspberry Pi maintains its position of
  where it is. It isn't a great computer, it is a great ecosystem.
  ... "... would just be happy if my rpi would not randomly corrupt
  the memory card for no reason all the time. ..."  Many comments on 
  reliability (or not) of various brands/kinds of SD cards, and how
  to boot from server as alternative to SD cards etc.

 6 Apr 2018

- https://news.ycombinator.com/item?id=16775744 - "Ask HN: How to
  self-learn electronics?"  Many many detailed responses with advice
  on books, videos, equipment, and methods.

- https://news.ycombinator.com/item?id=16773824 - comments on NixOS
  18.03 Released.  "It makes all packages immutable by giving them
  their own directory identified by a hash that is derived from ALL of
  that package's dependencies. ... all changes you make to your system
  are non-destructive. ... you can always roll back to a previous OS
  state ... If you want to reproduce your system, you can copy the
  whole content and "checkout" the relevant revision on the new
  system. ..."

 5 Apr 2018

- http://cs107e.github.io/ - "CS107e Spring 2018 ... third course in
  Stanford’s introductory programming sequence. ... bare metal
  programming on the Raspberry Pi. ... uses no operating system and
  few external libraries." ... resource page links to Raspberry Pi
  Bare Metal Forum at 
  https://www.raspberrypi.org/forums/viewforum.php?f=72.   Possibly
  pertinent: https://web.stanford.edu/class/cs140e/ - "CS140e (Winter
  2018) An Experimental Course on Operating Systems ... students
  implement a simple, clean operating system (virtual memory,
  processes, file system) on a Raspberry Pi 3 in the Rust programming
  language".  Comments: https://news.ycombinator.com/item?id=16134618
  See also 18 Jan 2018.

- http://seenaburns.com/2018/04/04/writing-to-the-framebuffer/
  "... /dev/fb0 acts like any other memory device in /dev and we can
  write to it like a file. ...", several examples using cat and simple
  C programs.  https://news.ycombinator.com/item?id=16755552 "Keep in
  mind that /dev/fb, on a modern system, isn't an actual framebuffer
  on your GPU. It's a land of make-believe, mostly supported to get
  the kernel console ("fbcon") working. ... there's compatibility code
  which sets up a user-space buffer in the KMS subsystem [0] which is
  swapped to when fbcon happens through a large chain of strange
  events that are hard to describe. ..."   See also 31 Jan 2018.

 2 Apr 2018

- https://github.com/vygr/ChrysaLisp - "Parallel OS, with GUI,
  Terminal, OO Assembler, Class libraries, C-Script compiler, Lisp
  interpreter and more...  Runs on OSX or Linux for x64 ... Will move
  to bare metal eventually ...  What we deserve is a modern version of
  what Taos did ..." (author is "Inventor of the Taos OS")

30 Mar 2018

- https://github.com/ShivamSarodia/ShivyC - "ShivyC is a hobby C
  compiler written in Python that supports a subset of the C11
  standard ...  has a very limited preprocessor that parses out
  comments and expands #include directives."  Not small, looks like
  thousands of lines.  Comments in
  https://news.ycombinator.com/item?id=16719648 - "... The parser has
  a somewhat unusual structure ... "exception-oriented programming"
  ... fits that code well."

28 Mar 2018

- https://try-mts.com/why-try-mts/ - "Try MTS. Exploring the Michigan
  Terminal System. ...  an operating system running on IBM System/360
  compatible mainframes dating from the 1960s. ... back in the 60s and
  70s there was an explosion of new operating systems and ideas and
  it's important to get a flavour of what was going on then."

19 Mar 2018

- https://idea-instructions.com/ - "An ongoing series of nonverbal
  algorithm assembly instructions" - in the style of Ikea
  instructions!

16 Mar 2018

- https://github.com/thoughtbot/write-yourself-a-roguelike - "Write
  Yourself A Roguelike: Ruby Edition ... compile the contents of the
  book directory into an EPUB-formatted e-book." (contents are .md
  files)

15 Mar 2018

- https://news.ycombinator.com/item?id=16591918 - "“Write your own” or
  “Build your own” software projects. ... writings/tutorials/videos
  which describe a specific technology or feature by implementing them
  ..."  Many links to pertinent projects.  Added 16 Mar:
  https://github.com/tuvtran/project-based-learning "Curated list of
  project-based tutorials",
  https://github.com/cweagans/awesome-diy-software "list inspired by
  this HN post" (above), apparently mostly just links from that post.

- http://nsl.com/ - "no stinking loops ..." APL/J/K/Q etc. Many many
  links, including lots of code at http://nsl.com/k/ and
  https://a.kx.com/a/k/examples/  Linked from
  https://news.ycombinator.com/item?id=16584139 "after K ... the whole
  software engineering world starts to look like a ridiculous house of
  cards.  (K can do) fast and efficient in memory databases in ~20
  lines, or an npm-style package manger[1] in less than ~400 lines"

12 Mar 2018

- https://news.ycombinator.com/item?id=16562173 - "How to self-learn
  math?"  Many book suggestions.

- https://news.ycombinator.com/item?id=16562956 - comment in parent
  https://news.ycombinator.com/item?id=16562694 "Were we more
  productive ... years ago?" "No, absolutely not. ... in web dev
  ... rails was the big revolution. ... wasn’t so much techical as
  social: ... an extremely well-curated set of best practices
  ... under the guise of a framework. ... you could join any team and
  know your way around the codebase on the second day."

- https://news.ycombinator.com/item?id=16563507 - comment in parent
  https://news.ycombinator.com/item?id=16562694 "Were we more
  productive ... years ago?" "I definitely have to put up with more
  distraction ... but I also know and learn more. It's hard to tame
  internet to not be invasive ... given most actors are actively
  trying to be invasive. ...  given the utility of internet, one has
  to learn to put up with it, and that's not all that easy. ...  I do
  not enable notifications from anything ... I decide when I want to
  know about the outer world: check feeds or mail manually, when I
  want.  I use no social media.  ... The biggest distraction with
  computers is internet. And one needs to learn how to use it
  defensively. Maybe we need a "Defensive Internet Users" wiki thing?"

10 Mar 2018

- https://n-o-d-e.net/ubuntu_laptop_overview.html and
  https://n-o-d-e.net/ubuntu_laptop_how.html. "THE DIY $100 MINI
  UBUNTU LAPTOP ... Nexus 7 tablet and keyboard ... fits in one hand,
  and weighs about 900g ... an official Ubuntu ARM port made by
  Canonical which is specifically for the 2012 Nexus 7 ... low power
  ... can easily charge it through a USB charger."  Interesting page
  design and typography.

 4 Mar 2018

- https://www3.nd.edu/~dthain/courses/cse40243/fall2017/intel-intro.html
  "This is a brief introduction to X86-64 assembly language for novice
  compiler writers using the GNU software tools. ... not exhaustive
  ... but ... enough to ... write most of the backend of a C compiler
  for an undergraduate class."

- http://xxyxyz.org/line-breaking/ - "Line breaking, also known as
  word wrapping or paragraph formation, is the problem of dividing a
  text into a sequence of lines so that every line spans at most some
  fixed width. ...  (The obvious) greedy algorithm ... may leave too
  much whitespace at the end of a line ... wildly different line
  lengths ... The idea then is to come up with a configuration of line
  breaks which minimizes the total sum of such penalties, a strategy
  know as 'minimum raggedness'. "  Presents several algorithms in
  Python, with explanations and references.  Interesting page design
  and typography.  Links to other pages by same author.
  https://news.ycombinator.com/item?id=16511900 explains the graphs.

 3 Mar 2018

- https://sortix.org/ - "a small self-hosting operating-system aiming
  to be a clean and modern POSIX implementation. It is a hobbyist
  operating system written from scratch with its own base system,
  including kernel and standard library. It has been in development
  since February 08 2011 by a single developer ... C with a C++ kernel
  ... The lack of compatibility constraints compared to other
  operating systems makes it possible to make a cleaner
  implementation. ... 1.0 release has 169k lines of source code ..."
  https://news.ycombinator.com/item?id=16500705 - discussion of Sortix
  with several contributions by the author on motivation, design
  decisions, and comparison to other projects.

 2 Mar 2018

- http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ed.html 
  POSIX specification for ed, from IEEE Std 1003.1-2008, 2016 Edition
  "The input files shall be text files. ..."

28 Feb 2018

- https://github.com/norvig/paip-lisp - "Lisp code for the textbook
  'Paradigms of Artificial Intelligence Programming (1992)' ... (also)
  A pdf of the book ..."
  https://news.ycombinator.com/item?id=16469167 - "This book is
  timeless classic that is not getting old. ... learn to program after
  you already know how to program. ..." "Following Norvig’s thought
  process on how to develop computer programs is like pair programming
  with one of the best programmers of all time. ..."

- https://news.ycombinator.com/item?id=16471019 - thread in HN parent
  above: "(Norvig writes) (Lisp) is a good assembly language because
  it is possible to write Lisp in a style that directly reflects the
  operations available on modern computers." (Followed by several
  posts with examples of "this assembly style of programming in Lisp",
  some inline, some links)

- https://gist.github.com/razimantv/1b33d4a090a5bc9ed94928012b37c3f0 -
  "Stackify!  Deep recursion will give you stack errors. ... you can
  decorate the function by abusing exceptions and turn the function
  iterative ... (defines function named stackify, demonstrates
  @stackify def ackermann(M,N): ...)"
  https://news.ycombinator.com/item?id=16478534 - "Abusing python can
  really save your life sometimes." "I love how everything is
  available at runtime. ... super useful in a pinch." "Nothing is more
  permanent than a temporary solution." (Many posts show, or link to,
  unobvious uses/abuses of Python)

25 Feb 2018

- http://lispm.de/springer-lisp-books - Lisp/AI books from Springer, free
  for download, including:
  LISP Lore: A Guide to Programming the LISP Machine, Second edition, 1987 
  LISP, Lore, and Logic, An Algebraic View of LISP Programming,
   Foundations, and Applications, 1990
  Computer-Aided Reasoning, An Approach, 2000 - About ACL2
  Computer-Aided Reasoning, ACL2 Case Studies, 2000
  many more ...

24 Feb 2018

- https://news.ycombinator.com/item?id=14076352 - comment in
  https://news.ycombinator.com/item?id=14075795 "Ask HN: Has anyone
  considered forking TempleOS and making a modern OS out of it?"
  "Part of what makes TempleOS so powerful with so little code is that
  everything fits together, so you can make a lot of
  assumptions. ... Really tightly integrated designs eventually get to
  the point where there's almost nothing to change... because each
  design choice relies on the last. ... you eventually end up with an
  extremely lightweight design that is very strong, but where every
  piece of the whole is extremely important. ... It's not perfect but
  it's pointed at perfection and it aims to get there."

21 Feb 2018

- https://news.ycombinator.com/item?id=16423643 about Steven Levy's
  book Hackers: Heroes... (responding to parent post
  https://news.ycombinator.com/item?id=16421674 about Brand's Spacewar
  in Rolling Stone): "Reading the book now and it’s making me a little
  sad. Where can I find today’s Tech Model Railroad Club, Homebrew
  Computer Club, Community Memory, People’s Computer Company? Are
  there still places left where computing is small, local,
  non-commercial and so alive? I love programming, but I’ve never felt
  myself to be part of any tribe like the people in Hackers clearly
  do. It all just feels so commoditized and un-magical these days!"

19 Feb 2018

- https://www.dailycodingproblem.com/blog/archives/ - "Get
  exceptionally good at coding interviews by solving one problem every
  day."  Classic problems with simple Python solutions and explanations:
  blog/knights-tour/
  blog/an-introduction-to-backtracking/
  blog/how-to-formulaically-solve-tree-interview-questions/
  blog/how-to-find-arbitrage-opportunities-in-python/

12 Feb 2018

- https://blogs.scientificamerican.com/guest-blog/the-evolution-of-the-physicists-picture-of-nature/ - "We are republishing this article by Paul Dirac from the May 1963 issue of Scientific American ..."

- https://github.com/shreevatsa/knuth-literate-programs/tree/master/programs
  linked from https://news.ycombinator.com/item?id=16363186 - "Who is
  the longest-serving programmer? ... (Knuth) still writes two or
  three programs a week ... here:
  https://cs.stanford.edu/~knuth/programs.html — the most recent is
  from December 2017. They are in .w format (CWEB) ... I've typeset
  them here (at the above URL).

 9 Feb 2018

- http://rosalind.info/problems/list-view/ - "Rosalind is a platform
  for learning bioinformatics and programming through problem
  solving."  http://rosalind.info/problems/locations/ - " If you don't
  know anything about programming, you can start at the Python
  Village. For a collection of exercises to accompany Bioinformatics
  Algorithms book, go to the Textbook Track. Otherwise you can try to
  storm the Bioinformatics Stronghold right now." Also "Bioinformatics
  Armory: Ready-to-use software tools abound for bioinformatics
  analysis. ..." and "Algorithmic Heights: A collection of exercises in
  introductory algorithms to accompany "Algorithms", the popular
  textbook by Dasgupta, Papadimitriou, and Vazirani."

 7 Feb 2018

- https://news.ycombinator.com/item?id=16324097 - "LMARV-1: A RISC-V
  processor you can see [video]" - link and discussion on
  https://www.youtube.com/watch?v=yLs_NRwu1Y4 - "LMARV-1: A RISC-V
  processor you can see. Part 1: 32-bit registers. (41:42) ... The LMARV-1
  (Learn Me A Risc-V, version 1) is a RISC-V processor built out of
  MSI and LSI chips. You can point to pieces of the processor and see
  the data flow. It should be a nice way of demonstrating how RISC-V
  works and how simple it is to implement."

- https://news.ycombinator.com/item?id=16324458 - comment in parent
  Python’s Weak Performance Matters, on why Python succeeded despite
  poor performance, many reasons, for example: "The language is easy,
  very attractive for non-CS people.  The language is consistent
  (everything is an object, or a pointer to an object rather, you can
  only pass by pointer, scope and namespace that make sense all the
  time, etc...) ..."

- https://news.ycombinator.com/item?id=16322599 - thread in parent
  Python’s Weak Performance Matters.  "Where are the main blowouts in
  python performance? ... is it compilation, evaluation overhead, or
  memory management?"  Many detailed answers with links, for example:
  "tl;dr: Python's dynamic features add lots of overhead to every
  operation, and CPython's simple implementation means you pay the
  overhead even when you don't use the dynamic features. ... The dot
  operator (e.g. `foo.x`) hides a /very complicated/ resolution
  process that can be /very expensive/. ..." (more explanation and
  several other examples follow)

 4 Feb 2018

- https://github.com/arogozhnikov/python3_with_pleasure - "Migrating
  to Python 3 with pleasure, A short guide on features of Python 3 for
  data scientists" "hacky suppressing / redirection of printing output:

      _print = print # store the original print function
     def print(*args, **kargs):
        pass  # do something useful, e.g. store output to some file

  Below. ... a context manager that temporarily overrides behavior of
  print: ... not a recommended approach, but a small dirty hack that
  is now possible."  Also other interesting unobvious stuff, and links
  to other Python3 pages.

 2 Feb 2018

- https://news.ycombinator.com/item?id=16294594 - "Plan 9 is an
  amazing, inspirational, and futuristic operating system from the
  past" Post in parent https://news.ycombinator.com/item?id=16292162
  on "Plan 9 public grid (9gridchan.org)" 

- https://news.ycombinator.com/item?id=16295885 "/proc came from plan9
  and BSDs are moving away from it, why is this the case?"  (Another
  post in thread linked above): "Exposing kernel bits via the
  filesystem makes less sense the more you think about it:
  ... Programs now have to deal with malicious applications capable of
  managing mountpoints giving fake results via the filesystem. I could
  link to /dev/random to /dev/zero ... It's definitely not a simple
  interface for the kernel to implement ...  (also) vulnerability to
  file descriptor exhaustion attacks. ..."
 
31 Jan 2018

- https://cmcenroe.me/2018/01/30/fbclock.html - "Programming the Linux
 Framebuffer ... to put a white pixel in the top-left corner of the
 screen ...  echo -en '\xFF\xFF\xFF\x00' > /dev/fb0 ... In order to
 put pixels wherever we want ... we’ll want to mmap the file instead
 ... int fb = open("/dev/fb0", O_RDWR); ... uint32_t buf = mmap(NULL,
 len, PROT_READ | PROT_WRITE, MAP_SHARED, fb, 0); ... Placing a pixel
 is now as simple as assigning buf[y * info.xres + x] an RGB value ..."

- https://cmcenroe.me/2017/05/05/linux-console.html - "Configuring the
  Linux Console ... I recently dug up my HP Chromebook 11 ...I used
  splat to install Arch Linux ARM ... I decided not to install X.Org
  and stick to the console. ... it can actually be configured in many
  of the same ways as graphical terminal emulators! ... (shows how)
  ... these are the applications I use on the console: jfbview, PDF
  viewer; fbv, image viewer; ..." (with links to their Arch packages).

- https://cmcenroe.me/2015/09/27/ascii.html - "ASCII to My Heart ...
  Values starting with 10 represent the capital letter at the position
  in the alphabet of the last 5 bits. For example, 1000011 is the
  character “C”. ..." (etc.)

30 Jan 2018

- https://ask.metafilter.com/318420/Site-to-Read-Real-Code-Like-Python
  Includes my first Ask Metafilter answer, after 10+ years lurking.

- https://github.com/norvig/pytudes - "Python programs to practice or
  demonstrate skills" - many IPython notebooks, cited by me in my
  answer above.

- http://www.aosabook.org/en/index.html - "500 Lines or Less" -
  another answer (not mine) to the same AskMe.

- https://news.ycombinator.com/item?id=16267202 - comments on "Xi: an
  editor for the next 20 years [video] (recurse.com)"

- https://lsub.org/who/nemo/9.intro.pdf - "Introduction to Operating
  Systems Abstractions Using Plan 9 from Bell Labs by Francisco J
  Ballesteros - Draft 9/28/2007" 416 page book.  

- https://news.ycombinator.com/item?id=16254250 - comment on above -
  "... There's this emphasis on simple, sane ways of fulfilling tasks
  on plan9 that permeates the whole system. It's beautiful."

- https://marc.info/?l=9fans&m=111558822710356&w=2 - "From: Russ Cox
  Date: 2001-10-25 ... Why plan 9?"
  https://news.ycombinator.com/item?id=11882797

20 Jan 2018

- http://aiju.de/code/tiny - The Tiny Unix Tools: the shortest
  implementations of common Unix tools.  For example, "ed:
  main(a){for(;;){read(0,&a,1);write(1,"?\n",2);}}" Oh, it's a joke.


18 Jan 2018

- https://www.rand.org/pubs/classics.html - Classic RAND papers including
  Paul Baran's Distributed Communications series

- https://jsandler18.github.io/ - "Building an Operating System for
  the Raspberry Pi" and https://news.ycombinator.com/item?id=16180975
  with "I used this tooling: https://github.com/ali1234/rpi-ramdisk to
  build a tiny fine-tuned Raspbian for "embedded" Python 3 (a project
  I dub PiratePython). It uses multistrap/qemu ..."
  https://github.com/pimoroni/PiratePython "...aims to bring the
  simplicity of MicroPython to the Pi, but all the power of the
  full-blown Python..." (links to other minimal distros for RPi in
  these comments)

15 Jan 2018

- http://tenex.opost.com/hbook.html - "Origins and Development of
  TOPS-20 by Dan Murphy" especially sections on "User-oriented Design
  Philosophy" "Escape Recognition, Noise Words, Help" "The COMND
  Service".  Also pertinent:
  http://www.math.utah.edu/~beebe/publications/1987/t20unix.pdf "Unix
  for TOPS-20 Users", especially section 3 "Command Processors"
  compares Unix shells to TOPS-20 EXEC: "(in Unix) No in-line help is
  available from the shell, like it is with the Tops-20 EXEC. This is
  a serious flaw of essentially every other operating system but
  Tops-20, and forces a user who has partially typed a command line
  and then forgotten the name of a switch to reach for a printed
  manual, or abort the typein and go search for on-line
  documentation."  Recall Hank Levy (former DEC engr, UW CSE faculty)
  said (in 198x) that TOPS-20 had the best command line UI of any OS.

14 Jan 2018

- https://news.ycombinator.com/item?id=13205419 - "What sort of things
  could/can VMS do that Unix couldn't?"

12 Jan 2018

- https://retrocomputing.stackexchange.com/questions/5341/how-did-people-use-ed
  Many memoirs of programming in the 1970s and earlier, with printing
  terminals and punched cards.

10 Jan 2018

- https://news.ycombinator.com/item?id=16118155 links to
  http://www.oreilly.com/openbook/utp/UnixTextProcessing.pdf and says,
  "Whenever I read this book again, I am reminded of how much UNIX
  know-how is probably being lost to new generations that are steered
  away from learning the foundations that still make up their
  operating systems. ...  Be warned, if one demonstrates the effective
  use of such old programs to others who have committed themselves to
  todays large, complex software, the reactions may not be
  positive. They might be dismissive or insulting, they might accuse
  one of being a "luddite", or perhaps a "neckbeard" practicing some
  unexplained type of "elitism".  The uninitiated person who sees the
  results of UNIX text processing as nothing short of "magic" is rare
  indeed. It is that person who might enjoy this book."  This was in
  comments on https://virtuallyfun.com/2018/01/10/life-in-unix-v7-an-attempt-at-a-simple-task/ 
  "(using) vi, staring at a blob of text with no syntax highlighting
  and with limited space, you start appreciating troff/nroff much
  more. ... LaTeX tends to have fairly verbose commands. ...
  ‘‘parsing’’ troff/nroff syntax is much easier ... on your tiny 80×24
  screen ... As for the (V7/x86) system as a whole, I was positively
  surprised how usable it was by today’s standards."

- https://ask.metafilter.com/317751/A-few-questions-about-the-blockchain
  Several clear explanations with links to more.

- https://github.com/tonybaloney/mocker - "A crappy imitation of
  Docker, written in 100% Python ... I'm giving a talk ... and fancied
  a simple implementation to show how container isolation works. ... I
  wrote this in 2 days, don't take it seriously" Comment at
  https://news.ycombinator.com/item?id=16114724: "This is great, and
  the code is particularly easy to follow and quite Pythonic. Nice!"

 8 Jan 2018

- https://github.com/hchasestevens/hchasestevens.github.io/blob/master/notebooks/the-decorators-they-wont-tell-you-about.ipynb 
  Comments https://news.ycombinator.com/item?id=16084238
  "This notebook should be named "how to abuse decorators"..." But worth
  looking at anyway.

 7 Jan 2018

- http://xon.sh/ "the xonsh shell ...  Xonsh is a Python-powered,
  cross-platform, Unix-gazing shell language and command prompt. The
  language is a superset of Python 3.4+ with additional shell
  primitives that you are used to from Bash and IPython. ..."

- http://www.dougengelbart.org/firsts/1968-demo-interactive.html -
  Doug Englebart's famous "'Mother of all demos', a chapterized version"

- https://www.raspberrypi.org/blog/why-raspberry-pi-isnt-vulnerable-to-spectre-or-meltdown/
  Comment at https://news.ycombinator.com/item?id=16080002 "This is a
  good overview of modern, superscalar, out-of-order, speculative CPUs
  that literally any programmer could easily understand. Recommended
  reading for every single engineer in the whole world" "Finally I
  understand how the leakage works: no actual reading of kernel memory
  is taking place. Instead, the read-ahead/speculative logic causes
  one of two addresses in user space to be read, and thus placed in
  the cache. So, by reading both of them, and checking the time it
  took, the exploit can indirectly determine one bit (0 or 1) of
  kernel memory. Scary!"

 6 Jan 2018

- https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/
  comments https://news.ycombinator.com/item?id=16084763 - "Bash
  has a huge number of little shortcuts that are difficult to learn."
  HN comment links to http://mywiki.wooledge.org/BashFAQ, 116 "How do I..?"
  questions.

- http://yeokhengmeng.com/2018/01/make-the-486-great-again/ "Modern
  Linux in an ancient PC - What is the oldest x86 processor that is
  still supported by a modern Linux kernel in present time?" It's 486,
  "support for the 386 was dropped in Dec 2012."  They get Gentoo
  running on a 1993 IBM PS/1.  "AMD 5X86 486-clone running at 133mhz
  ... 64MB SDRAM" "It takes 11 minutes to boot up to the login prompt
  and 5.5 mins to shutdown."  "low-level detailed instructions" at
  https://github.com/yeokm1/gentoo-on-486/  Comments at
  https://news.ycombinator.com/item?id=16085068 "Wow it's a lot slower
  now than it is with 1992 Linux."

 4 Jan 2018

- https://github.com/jlevy/the-art-of-command-line - "Master the
  command line, in one page" - but it's a very long page!  Much is
  potentially useful, not well known (by me).

- https://medium.com/@amathstudent/learning-math-on-your-own-39fe90c3536b
  "Learning math on your own. A guide, heartfelt and opinionated"
  Includes some unusual suggestions.

 3 Jan 2018

- https://rcoh.me/posts/notes-on-cpython-list-internals/ - with links
  to CPython source and docs

25 Dec 2017

- http://www.nyx.net/~ewilli/edtut.pdf - A Tutorial Introduction to
  the UNIX Text Editor by Brian W. Kernighan - "Almost all text input
  on the UNIX operating system is done with the text-editor ed."

24 Dec 2017

- https://bitbucket.org/infpi/inferno-rpi - Inferno OS for Raspberry
  Pi - via https://news.ycombinator.com/item?id=15993639: "... many
  aren't aware of Inferno OS and always think Plan 9 was the end of
  the line, when that status actually belongs to Inferno OS.  Which
  implemented the original vision for Plan 9, regarding what Pike
  wanted to do with Alef."

23 Dec 2017

- https://notamonadtutorial.com/harvey-an-operating-system-with-plan-9-s-shadow-3081414e5f0b
  "Plan 9 implements true resource sharing as opposed to remote
  access. M. A. Padlipsky succintly defines the difference in his
  classic RFC 871 — A PERSPECTIVE ON THE ARPANET REFERENCE MODEL,
  which is a great read.  Most Unix ­derived systems today implement
  remote access, via tools like ssh, not resource sharing."  Also
  briefly comments on 9front, node9, 9base, Glendix and plan9port.
  via https://news.ycombinator.com/item?id=15989697 which discusses
  https://harvey-os.org/ HN comment
  https://news.ycombinator.com/item?id=15990803 says "it's a Plan9
  fork refreshed for modern build chains plus golang support."

20 Dec 2017

- http://screenl.es/ - The Screenless Office is a system for working
  with media and networks without using a pixel-based display. It is
  an artistic operating system. ...  Currently, it exists as a working
  prototype with software "bureaus" which allow a user to read and
  navigate news, web sites and social media entirely with the use of
  various printers for output and a barcode scanner for input. ..."
  Comments vary from baffled to admiring:
  https://news.ycombinator.com/item?id=15960056

18 Dec 2017

- https://news.ycombinator.com/item?id=15951288 - A plan to rescue the
  Web from the Internet - much discussion of problems and alternatives - 
  didn't look at original article

12 Dec 2017

- http://warsus.github.io/lions-/ - A Commentary on the Sixth Edition
  Unix Operating System, by J. Lions. Classic book, in a nice HTML
  rendering.

 9 Dec 2017

- https://soupi.github.io/rfc/reading_simple_haskell/

 8 Dec 2017

- https://news.ycombinator.com/item?id=15877908, comments on The
  GNUnet System.  "Is anyone knowledgeable that can tell me the
  difference between IPFS, GNUnet, Zeronet, freenet or even something
  like i2p, tor and urbit .. as well as probably others."  Many answers.

 5 Dec 2017

- https://staff.science.uva.nl/c.dominik/hpcalc/emacs/
  Emacs for HP49G and hp49g+

 4 Dec 2017

- https://dave.cheney.net/2017/12/04/what-have-we-learned-from-the-pdp-11
  blog post reviews Gordon Bell's paper from 1976.

 2 Dec 2017

- http://python.apichecklist.com/ - Checklist for Python library APIs
  also https://news.ycombinator.com/item?id=15827945

 1 Dec 2017

- http://publications.computer.org/annals/2017/11/14/history-of-ibm-branch-offices-1920-1980/ - annals of the history of computing (just an example)
  http://publications.computer.org/annals/2017/11/14/ - toc for that day
  http://publications.computer.org/annals/ - home page 
  Blog about the contents of the journal, with summary articles that 
  link to the journal articles.

- http://mattwarren.org/2017/11/28/Exploring-the-BBC-microbit-Software-Stack/
   MicroPython runtime (among others) on ARM mbed OS.  Links to:
  
- https://github.com/carlosperate/awesome-microbit#programming


15 Nov 2017

- http://lcamtuf.coredump.cx/electronics/ - Concise electronics for geeks -
  20,000 words, comprehensive rather than concise.

- https://loomcom.com/contraltojs/ - ContrAltoJS Xerox Alto Emulator
  "This is a port of the Living Computer Museum's ContrAlto project to
  JavaScript."

13 Nov 2017

- https://github.com/everythingwillbetakenaway/DX7-Supercollider
  Yamaha DX-7 clone. Programmed in Supercollider.  Comments in
  https://news.ycombinator.com/item?id=15686350, including link to
  https://asb2m10.github.io/dexed/ "Dexed is a multi platform, multi
  format plugin synth that is closely modeled on the Yamaha DX7. Dexed
  is also a midi cartridge librarian/manager for the DX7.  Dexed
  requires a AU/VST host (like Savihost or Reaper) in order to run the
  plugin."

- https://github.com/jeffmer/micropython-upyphone - gsm phone using
  pyboard and sim800l. Comments in
  https://news.ycombinator.com/item?id=15686316 "I thought it would be
  an actual GSM stack written in Micropython (like OsmocomBB etc.),
  but alas, it's only the UI" "only works with a 2G network
  ... T-Mobile is the only operator of such a thing in the US, and
  they're trying to phase it out"

 7 Nov 2017

- https://github.com/pmaupin/pdfrw - pdfrw is a pure Python library
  that reads and writes PDFs - quite an opus, notable README on that page
 
 3 Nov 2017

- http://sfpc.io/spring2018/ - School for Poetic Computation.  Also add
  links to recurse center and criticalengineering.org/courses (above, 21 Jul)

2 Nov 2017

- https://blog.lizzie.io/linux-containers-in-500-loc.html - Literate program 
  with lots of explanation - also HN comments at item?id=15608435.

- https://github.com/kragniz/omochabako - Toy container runtime in Python
  (via HN comments above)


30 Oct 2017

- https://archive.org/stream/9780262610261#page/n0/mode/2up - A
  FORTRAN Coloring Book - other links to download pdf or ebook formats
  incl. kindle don't work

- https://mathoverflow.net/questions/43690/whats-a-mathematician-to-do/44213#44213 - Bill Thurston's essay in response to "What's a mathematician to
  do?". He writes, "It's not mathematics that you need to contribute
  to. It's deeper than that: how might you contribute to humanity, and
  even deeper, to the well-being of the world, by pursuing
  mathematics?" ...  "The product of mathematics is clarity and
  understanding ... The world does not suffer from an oversupply of
  clarity and understanding ..."  Other answers in the MO post are
  also very pertinent.


28 Oct 2017

- https://news.ycombinator.com/item?id=15565872 - about lively.next -
  "... program similarly to Smalltalk and Self, i.e. instead of a
  edit-compile-run cycle you have an ever running "program" and change
  various parts of it directly ... "
  (Later, 30 Oct) another response in this thread on Smalltalk 
  "inner platform" - most ST systems create a whole OS including
   graphics, window manager, scheduler ...  difficult to 
   separate out an application - 'what if you had to run every
   Java application inside Eclipse' (paraphrase).


24 Oct 2017

- https://wiki.debian.org/DontBreakDebian ...

23 Oct 2017

- https://technicshistory.wordpress.com/2017/23/the-electronic-computers-part3-eniac
  and other pages in this series - very nicely designed, nice photos.
  This page cites the book ENIAC in Action, which has its own page
  eniacinaction.com

21 Oct 2017

- http://xeroxalto.computerhistory.org/xerox_alto_file_system_archive.html - 
  best page on Alto, links to all the reports papers and code including 
  microcode.

19 Oct 2017

- therealmntmn.tumbler.com/.../interim-os... - via /archive
   Photos of interim-os - also confirm we have current link to
   interim-os.com.  He has bare bones OS running on RPi 2.
   Source code might be interesting.  On interim-os.com
   he writes "Un(der)documented VideoCore IV "QPU" has boot control ...
   ARM CPU is a peripheral device"

- https://wiki.debian.org/RaspberryPi - compares Debian to Raspbian,
   explains disadvantages of RPi "the board design is closed and 
   the main processor is not available for purchase by the public"

 7 Oct 2017

- https://simonwillison.net/2017/Oct/5/django-postgresql-faceted-search/
   Simon Willison's blog is back!  Looks like it's been there all along - 
   how did we lose it several years ago?

   9 Oct - I looked through it = not as good as before - in recent
   years through 2016, and all posts are in the form of a single
   (often banal) question with a (short) answer.  It appears that
   these are mostly Stackoverflow or Quora questions.  Also, more
   about Javascript now than Python. 

   10 Oct - Simon Willison's better old-style posts that I remenber
   end June 2010, with "getting married".  After that only Q&A posts.
   Oct 2010 has 65 questions!  

 3 Oct 2017

- https://www.newyorker.com/magazine/2013/01/14/structure - Structure,
  by John McPhee, on his use of the KEdit editor.

 2 Oct 2017

- metamodular.com/lispos.pdf - LispOs ... by Robert Strandh dated 2013.
  new (working) URL for paper linked in precursors.md.  Any new content?
  Oh, we do have LispOs in precursors.md now.

- https://news.ycombinator.com/item?id=15379418 - "Ask HN: Where do I
  go to get started on ASIC, FPGA, RTL, Verilog et. al?" - lots of
  informed responses

30 Sep 2017

- http://www.inwap.com/pdp10/hbaker/hakmem/hakmem.html - more recent but
  similar URL to the ones we have.

- http://hakmem.org/ - nicely formatted single page version

27 Sep 2017

- http://thin.npr.org/ - Text-only NPR.  HN thread shows lots of variations
  using minimal CSS etc.  Put that in typography section.

25 Sep 2017

-  https://technicshistory.wordpress.com/2017/09/20/the-electronic-computers-part-2-colossus/ - 
  Informative, nice page design.  via
  https://news.ycombinator.com/item?id=15297861 - John Nagle (Animat)
  comments on Colossus, also reviews 1930s 40s 50s special-purpose or
  non-stored-program calculating/computing machines.

19 Sep 2017

- http://jsomers.net/blog/docwriter - "DocWriter: the typewriter that
  sends its keystrokes in real time to a Google Doc" - it's a
  hacked-up Brother portable with an RPi inside!

- https://github.com/k0kubun/llrb - "LLVM-based JIT Compiler for Ruby"

- https://breakerofthings.tech/2017/09/17/how-to-show-text-on-the-screen.html
  Renders *Hindi* text on the screen!

- http://zipcpu.com/ - Blog on FPGAs

- https://gmplib.org/~tege/qemu.html - "System emulation using QEMU"
  How-to for emulating lots of different architectures on several host OS

- https://ux.stackexchange.com/questions/101990/why-are-terminal-consoles-still-used
  Lots of replies on advantages of text/terminals/command line over GUI


16 Sep 2017

- https://news.ycombinator.com/item?id=15265462 - HN comments on Alan
  Kay thread explaining his vision of a computer system where
  everything can be programmed by the user - a real guitar (Kay's
  Dynabook) vs Guitar Hero (iPad).


15 Sep 2017

- https://ux.stackexchange.com/questions/101990/why-are-terminal-consoles-still-used
  see 19 Sep below

13 Sep 2017

- https://softwarefoundations.cis.upenn.edu/current/lf-current/Basics.html
  etc.  - Coq theorem prover applied to programming language theory,
  with lots of basic tutorial for Coq.  See also GeoCoq (below) for
  geometry proofs, and Freek Wiedijk's Provers of the World (below).

12 Sep 2017

- aschmann.net/AmEng/#SmallMap - awesomely detailed map of US and
   Canadian dialects with tons of explanation and zillions of links to
   youtube with speech samples.

- https://www.cl.cam.ac.uk/~lp15/MLbook/pub-details.html - ML for the
  Working Programmer, 2nd Edition - free download!
  (each chapter is a separate .pdf file, links at the bottom of this page)


11 Sep 2017

- https://www.nostarch.com/xboxfree - Free download of Bunnie Huang's
  Hacking the Xbox in memory of Aaron Swartz.

- https://www.edukera.com - "Teach mathematics with a proof assistant"
  uses Coq in three areas: calculus, logic, sets.


10 Sep 2017

- https://news.ycombinator.com/item?id=15206540 - HN comments on New Scientist 
  story on incomprehesible proof of ABC conjecture.  Lots of informed comment
  and links on automated theorem proving, proof checking.

- http://www.cs.ru.nl/~freek/comparison/comparison.pdf - The Seventeen Provers
  of the World - 169 p pdf linked from above HN thread.

- https://github.com/yogthos/cheatsheets/blob/master/mastodon.social.md
  How to set up Mastodon, linked from this advocate's post:
  https://news.ycombinator.com/item?id=15212373.   Also
  https://joinmastodon.org/ is recommended in same HN thread,
  https://news.ycombinator.com/item?id=15211074

- http://www.sunrise-ev.com/6502.htm - The 6502 40th Anniversary Computer Badge -
  minimal 6502 6-chip SBC + LED character display (to show your name or ...)
  the size of a badge/name tag.

- http://imgur.com/a/8plOW - Restoring a Soviet-era analog music
 synthesizer - lots of photos - linked from 
 https://news.ycombinator.com/item?id=15207478 - more links about the
 synthesizer, some of its music.

 6 Sep 2017

- https://web.stanford.edu/class/e145/2007_fall/materials/noyce.html -
  'The Tinkerings of Robert Noyce' by Tom Wolfe in Esquire magazine,
  Dec 1983

 5 Sep 2017

- https://danluu.com/risc-definition/ - What's the definition of RISC? - John Mashey's Usenet posts.  Also at
  http://userpages.umbc.edu/~vijay/mashey.on.risc.html but danluu
  version has nicer formatting (HTML not ascii) and more material,
  additional posts on CDC6600 and VLIW.

31 Aug 2017

- https://news.ycombinator.com/item?id=15120984 comments on Optimizing
  latency of an Arduino MIDI controller - links to other embedded
  musical instrument pages, especially Bela http://bela.io
  https://github.com/BelaPlatform/Bela
  Bela is from http://instrumentslab.org/publications/

- https://github.com/rswier/swieros - A tiny hand crafted CPU
  emulator, C compiler, and Operating System ... Unix-ish kernel (based
  on xv6) ... for fun, education, and research.


30 Aug 2017

- https://github.com/python - Repositories related to the Python
  Programming language

- https://github.com/python/cpython - cpython and standard library

- https://github.com/python/cpython/tree/master/Lib - standard library
  for example https://github.com/python/cpython/blob/master/Lib/datetime.py
  (one module) or .../Lib/asyncio (package with many modules)

- https://github.com/python/peps/blob/master/pep-0008.txt pep-0257.txt etc.

- https://devguide.python.org/ - Python Developer's Guide

- https://github.com/python/peps

- https://www.python.org/dev/peps/pep-0008/ - PEP 8 -- Style Guide for Python Code

- https://www.python.org/dev/peps/pep-0257/ - PEP 257 -- Docstring Conventions


26 Aug 2017

- 1988 paper Design Philosophy of the DARPA Internet Protocols

25 Aug 2017

- http://thinkingeek.com/arm-assembler-raspberry-pi/ - 

- http://zipcpu.com/blog/2017/08/21/rules-for-newbies.html - Rules for
  new FPGA designers - comments in https://news.ycombinator.com/item?id=15089678

- http://www.jstor.org/stable/10.4169/mathhorizons.23.4.18 - Network
   of Thrones Andrew Beveridge and Jie Shan in Math Horizons

- http://n-gate.com/ - unfunny but voluminous, very repetitous snark
   about HN and FOSDEM.

24 Aug 2017

- https://news.ycombinator.com/item?id=15089476 - Ask HN: What is your
  all time favorite CS paper? - many suggestions to classics and
  others, with links

14 Aug 2017

- www.mathcounterexamples.net - a collection of mathematical curiosities.

7 Aug 2017

- https://github.com/jamesob/tinychain - A pocket-sized implementation
  of Bitcoin - README explains bitcoin - < 1200 lines of Python

- https:geocoq.github.io/GeoCoq/ also https://github.com/GeoCoq/GeoCoq - A
  formalization of the foundations of geometry in Coq based on
  Tarski's axiom system.  First link has links to several related papers,
  explains relation of Tarksi to Hilbert and also Beeson.


4 Aug 2017

- https://github.come/chrisdone/wish - trivial web browser written in
  Haskell, one file, < 600 lines. "straight-forward ... given the
  libraries available today" including "sdl2 for creating a window,
  rendering context, and mouse events, sdl2-cairo and cairo for rendering
  text onto the SDL surface."

- http://hrothen.github.io/posts/lets-build-a-browser-engine-in-haskell.html
  (coincidentally with above, but a different project)

2 Aug 2017

- http://herpolhode.com/rob/ugly.pdf - slides from Rob Pike's 2001
  talk, especially slide 6 'What makes Unix *Unix*' that lists nine
  features including  hierarchical file system, separable shell, pipes,
  regular expressions,...  was surprised to see regexp in that list - but
  what makes the list different from, say, Windows?

  Also this: "What makes the system good at what it’s good at is also
  what makes it bad at what it’s bad at. Its strengths are also its
  weaknesses. A simple example: flat text files. Amazing expressive
  power, huge convenience, but serious problems in pushing past a
  prototype level of performance or packaging. ..."

 1 Aug 2017

- https://eater.net/8bit/ - Build an 8-bit computer from scratch -
   74LS logic w/28C16 EEPROM on several solderless breadboards - also
   https://news.ycombinator.com/item?id=14450945 links to similar
   projects

- https://joinmastodon.org/ - "Mastodon is the world’s largest free,
  open-source, decentralized microblogging network."

- http://charlesleifer.com/blog/using-sqlite-full-text-search-with-python/


30 Jul 2017

- http://www.softwarepreservation.org/projects/LISP/MIT/AIM-001.pdf
An Algebraic Language for the Manipulation of Symbolic Expressions (1958) 
 by John McCarthy, very early report on Lisp.

- https://github.com/publicus/emacs-org-mode-for-the-laity - "causes
  Emacs to behave more like a "normal" text editor (with familiar
  keybindings ... such as C-c for copy, C-v for
  paste, C-z for undo ..."


29 Jul 2017

- https://kelu124.gitbooks.io/echomods/content/RPI.html - Building a
  Raspberry Pi based ultrasound imaging development platform - lots
  of details and links, including one to a journal article.

- https://cstheory.stackexchange.com/questions/1168/what-papers-should-everyone-read - Good selection, with links.

- https://github.com/banga/prefactor - prefactor - This is a tool that
  for writing AST-based refactorings for large Python codebases. It
  uses lib2to3 to convert source code to an AST, run a visitor over it
  that modifies the tree, and convert the tree back into source code.
  This comes with a Flask app that makes it really easy to write
  visitors. To use it, just start the app and open it in a browser:
  (cool figure).  Why lib2to3 - The AST returned by Python's ast module
  is lossy — it strips out information necessary for recreating the
  source code with the correct whitespace and comments. The AST
  returned by lib2to3 is more low-level, so it retains all of the
  information required to regenerate the source code faithfully.

- https://en.wikipedia.org/wiki/Timeline_of_computing_1950%E2%80%9379
   Actually a table, lots of interesting items from the
   mainframe-mini-micro era, but many omissions -- no Xerox Alto !?


26 Jul 2017

- https://musikcube.com/ Musikcube, a terminal-based music player,
  library, and streaming server.  https://news.ycombinator.com/item?id=14853212
  mentions alternatives.

24 Jul 2017

- http://www.howardism.org/ lots of emacs stuff including
  http://www.howardism.org/Technical/Emacs/new-window-manager.html - See
  also
  https://www.informatimago.com/linux/emacs-on-user-mode-linux.html

23 Jul 2017

- http://www.verizoninternet.com/bookmark/how-wifi-works/
  note bibliography with links near bottom

21 Jul 2017

- https://criticalengineering.org/courses/othernet/ also /cli/ /networkshop/
  (links.html Jul 21 2017)

- www.dunneandraby.co.uk/content/bydandr/13/0  Dunne & Raby Critical Design FAQ
  also /content/projects

19 Jul 2017

- http://www.wilfred.me.uk/blog/2017/04/30/remacs-talk-transcript/
  "Emacs is really just a lisp interpreter called temacs. The Emacs
  functionality that we know and love is really the standard library
  that ships with temacs. ... Being Emacsy is about providing an
  incredible mutable programming environment ..."

18 Jul 2017

- www.aroundh.org/journey/ - Around Digital Humanities in 80 days - links
  to 80 DH sites hosted/about around the world.

- math.stanford.edu/~ebwarner/SplashTalk.pdf - The Foundational Crisis
  of Mathematics - 18p. paper

- http://www.ps.uni-saarland.de/~hornung/bachelor.php - 
  Constructing Number Systems in Coq - follows development in Landau's
  Grundlagen der Analysis - links to 68 p. thesis, talks, and Coq code.
  (in math, in theorem provers, in links.html 21 Jul 2017)

17 Jul 2017

- www.informatica.co.cr/unix-source-code/research/1991/0101.html - Porting
  Unix to the 386 - classic paper on 386BSD design, 1991 - via Trivium blog

11 Jul 2017

- https://brendanzagaeski.appspot.com/0004.html - Minimal PDF,
   explains PDF file contents: " PDF is a binary format, but it
   contains mostly plain text ...  PDF is a human-readable document
   description language.
   https://brendanzagaeski.appspot.com/0005.html - hand coded PDF tutorial
    this appears to be more basic than 0004.html
   https://news.ycombinator.com/item?id=14727662 - HN discussion has
   more links to 'hand-made PDFs' etc.

- http://cppdepend.com/blog/?p=214 "exploring the SQLite codebase"
   https://news.ycombinator.com/item?id=14729239

- https://tylercipriani.com/blog/2017/07/09/the-rsync-algorithm-in-python/

- https://github.com/DutchGraa/crackcoin - Very basic blockchain-free
  cryptocurrency PoC in Python, github README also has explanation -
  https://eprint.iacr.org/2016/871.pdf academic paper explaining it:
  "A Framework for Truly Decentralised Fast Transactions"
  https://news.ycombinator.com/item?id=14730354 - more explanation,
  refs: "basically a blockchain, but with transactions instead of blocks..."

  
 5 Jul 2017
 
- http://www.springer.com/gp/marketing/turing-award-50-years?utm_campaign=CON32079_4&utm_medium=newsletter&utm_source=email&wt_mc=email.newsletter.8.CON32079.internal_4  
  Papers by Turing award winners to download (not their Turing award speeches/papers, though)

- www.saminiir.com - "Let's code a TCP/IP stack" series, also
  https://github.com/saminiir/level-ip "A hacker's userspace TCP/IP
  stack" uses Linux TUN/TAP device to intercept low-level network
  traffic from the Linux kernel.  Blog pages and github README include
  links to references.


 4 Jul 2017

- IEEE chip hall of fame pages for example 
  http://spectrum.ieee.org/semiconductors/devices/chip-hall-of-fame-fairchild-semiconductor-a741-opam, chip-hall-of-fame-atmel-atmega8 etc.
  Update 6 Jul - toc page is at spectrum.ieee.org/static/chip-hall-of-fame

- A very simple Lisp interpreter in 250 lines of literate
  Python.  http://khamidou.com/compilers/lisp.py/
  Interesting text and code side-by-side page design.
  Oh, but it contains what looks like novice Python code: 
   for i in range(len(a)):...a[i]...   etc.
  
- http://cpsc.yale.edu/sites/default/files/files/tr87.pdf
  APL idioms by Perlis and Rugaber, 1977, 50 pages!


29 Jun 2017

-  https://www.maths.cam.ac.uk/sites/www.maths.cam.ac.uk/files/pre2014/undergrad/admissions/readinglist.pdf
  Recommended readings for high-school students about to start college math.
  The ones I recognize are good, maybe some others are worth a look too.

28 Jun 2017

- ecee.colorado.edu/ecen4553/fall09/notes.pdf - 'compilation: from
  Python to x86 assembly' 80 pages - see also course notes at .../fall09/

- homepage.sns.it/lolli/articoli/Lolli.pdf 'Why mathemeticians do not love
  logic'

- https://www.loc.gov/collections/webcomics-web-archive/about-this-collection/
  for example http://www.octopuspie.com/2007-05-14/001-pea-wiggle/ via
  http://www.metafilter.com/167893/Its-all-been-eaten-you-cant-have-any-more
  Web comics (links.html 21 Jul 2017)

- https://web.stanford.edu/class/e145/2007_fall/materials/noyce.html -
  Tom Wolfe's 1983 Esquire article about Rob Noyce and Silicon Valley
  Put next to Stuart Brand and Jaron Lanier's memoirs

- https://www.yourworldoftext.com/home/ - "an infinite grid of text
  editable by any visitor. " see also /Help/ and sample screenshot


27 Jun 2017

- benhoyt.com/writings/pyast64/ - "Compiling Python syntax to x86-64
  assembly...".  Very small Python subset, just function calls, for loops,
  artithmetic expressions.  Uses Python's built-in AST module to do 
  much of the work.  Achieves speed 30x Python, similar to C compiled
  with gcc with no optimizations.  Also the HN comments link to 
  several other compile-from-python systems.

- https://github.com/shaunlebron/history-of-lisp-editing on early 
  structure editors - link in editors section.

- www.lighterra.com/papers/modernmicroprocessors/ 'a 90-minute guide' to
  modern unobvious microprocessor implementation - pipelines, caches,
  threading, out-of-order execution etc.

17 Jun 2017

- http://www.dear-data.com/theproject/ — Dear Data - saw
  the book at SPL ballard

14 Jun 2017

- HN post today on 16 linux commands that show you about hardware - 
   in great faiths/linux - there also add jvns post about bash.

- CS Canon paper posted on HN, HN discussion with links to many of 
  the cited books/papers


13 Jun 2017

- https://pdos.csail.mit.edu/6.828/2012/schedule.html - course that
  goes with xv6 OS - 2012 has terse lecture notes in .txt files!  The
  ones on virtualization and exokernels are really good.  also 2014
  and 2016 but their notes are in .md files that don't just display in
  browser, boo hiss!  Also, .txt notes on Multics, Plan 9, and
  exokernels etc. from Stanford OS course
  http://www.scs.stanford.edu/05au-cs240c/notes/

 9 Jun 2017

- plan 9 class notes from cat-v.  Also a few comments from latest HN
  Plan 9 thread.

 8 Jun 2017

- Computer History Museum (CHM) timeline with links to other pages?
   For some reason I didn't like this as much as I hoped to.

 6 Jun 2017

- https://himmele.blogspot.com/2017/06/fred-brooks-software-design.html
  highlights from Brooks' Design of Design book.

 5 Jun 2017

- http://pinksquirrellabs.com/blog/2017/05/30/asi64/ - 6502 assembler
  embedded in Racket, and another in Haskell:
  http://wall.org/~lewis/2013/10/15/asm-monad.html

- https://people.cs.clemson.edu/~mark/uprog.html - A brief history of
  microprogramming - also a good explanation.

 3 Jun 2017

- https://musicbrainz.org/ and https://news.ycombinator.com/item?id=14478515

- http://cs.brown.edu/~sk/Publications/Papers/Published/pmmwplck-python-full-monty/
  Python semantics expressed in Racket, makes an interpreter that
  passes some CPython tests.

26 May 2017

- https://smashingboxes.com/blog/building-programmable-synth-20/
  a few components on a solderless breadboard.  Uses $11 Nucleo-L432KC 
  computer chip, a volume pot, and a transistor to drive a little speaker.

24 May 2017

- maybe add Mesa/Pilot/Tajo/XDE on Xerox D-Machines to prescursors.md.
   Oberon-like but much bigger and more complicated.

- https://news.ycombinator.com/item?id=14403036 - Helping a Million
  Developers Exit Vim - "I met my wife because she was stuck in
  vi. ..."


23 May 2017

- https://news.ycombinator.com/item?id=14388127 - "you could build a
   Facebook, Instagram, or Twitter clone on top of email pretty
   easily. All it would take is a slightly reimagined client. Just
   whitelist addresses of people you "follow" and display their emails
   in a separate, more visually rich feed"

- https://news.ycombinator.com/item?id=14401057 - Good examples of
  interactive command-line user experience - many many links


21 May 2017

- https://news.ycombinator.com/item?id=14382752 - on old W3C Amaya web
  browser "from a time when the grand vision of the Web was to be much
  more participatory and collaborative".

- http://callingbullshit.org/syllabus.html - about the UW course


15 May 2017

- spinroot.com/gerard - history section Gerard Holzmanm's notes on
   history of Bell Labs: link to map of 5th floor with Thompson
   Ritchie et al offices, link to subsequent career paths of Bell Lab
   alumns.  In Unix history.

- https://technicshistory.wordpress.com - history of tech blog, 
  especially recent pages on telephone switching 2017/04/09/only-connect
  and relay computers 2017/05/10/lost-generation-the-relay-computers

11 May 2017

- http://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-4-in-python/ , uses PeachPy (below) also mentions llvmlite

- https://github.com/Maratyszcza/PeachPy - "x86-64 assembler embedded
  in Python" - linked conference paper is not very helpful

- https://github.com/asrp/pymetaterp - "A python parser that builds
  python ASTs in 502 lines of python without using modules ... Its
  (also) just another parsing expression grammar (PEG) based parser
  ..." (looking at README this looks very preliminary/half-baked)

- https://codewords.recurse.com/issues/seven/dragon-taming-with-tailbiter-a-bytecode-compiler
  and https://github.com/darius/tailbiter - "just enough Python to
  Python in Python ... A compiler from a subset of Python 3.4
  (starting with abstract syntax trees in Python's ast form) to
  CPython 3.4 bytecode. The compiler is coded in that same Python
  subset; it can compile itself. ... This is a continuation of
  https://github.com/darius/500lines/tree/master/bytecode-compiler"
 (also noted Apr 27 below)

- http://www.metafilter.com/166863/Piano-violin-and-cello - many links
   to YouTube, also a YouTube playlist.

 8 May 2017

- https://github.com/iogf/vy - "A vim-like in python made from
  scratch." - tightly coupled to Tk.  also comments in 
  https://news.ycombinator.com/item?id=14283942 link to
  https://github.com/RealHacker/python-vi - uses curses.

- http://www.openculture.com/2015/10/william-faulkner-draws-mythological-maps-of-yoknapatawpha.htmln - Faulkner's maps of Yok. county.
 

4 May 2017

- https://github.com/MichielDerhaeg/build-linux
  https://news.ycombinator.com/item?id=14264189, comments have any
  comparisons to http://linuxfromscratch.org/ and
  http://landley.net/aboriginal/about.html - "LFS
  teaches you about the whole GNU Userland, getting a kernel up and
  running with busybox is much easier. This project does just that -
  teaching you the bare minimum."

- http://www.johngustafson.net/pubs/pub57/ABCPaper.htm, Reconstruction
  of the Atanasoff-Berry Computer


27 Apr 2017

- http://benhoyt.com/writings/pygit/ - "pygit: Just enough git to
  create a repo, commit, and push itself to GitHub ... Notice the
  theme of using Python’s standard library for everything we can (os
  and hashlib)."

- https://github.com/darius/tailbiter - " just enough Python to Python
  in Python ... A compiler from a subset of Python 3.4 to CPython 3.4
  bytecode. The compiler is coded in that same Python subset; it can
  compile itself.  It can optionally run on top of a port of byterun
  to Python 3.4."

20 Apr 2017

- https://www.huyng.com/posts/python-performance-analysis

- https://pypi.python.org/pypi/pudb - example of windowed text ui

- http://www.labri.fr/perso/nrougier/from-python-to-numpy/ - online book!

- https://news.ycombinator.com/item?id=14158269 - comment thread started
   by python beginner with bad impression of numpy etc.

- Calulus Made Easy by Sylvanus Thompson (1914)
  http://djm.cc/library/Calculus_Made_Easy_Thompson.pdf - scanned old book pages
  http://www.gutenberg.org/files/33283/33283-pdf.pdf - recreated in LaTeX
  https://github.com/nadvornix/calculus-made-easy/blob/master/33283-pdf.pdf
    same thing at github
 https://news.ycombinator.com/item?id=14161876 - testimonials

- http://www.amightygirl.com/blog?p=14570 - women in science posters -
  other posters (not these) are scattered in unusual media subsection
  in graphics in links.html.


18 Apr 2017

- https://news.ycombinator.com/item?id=13645963 HN comment thread on how
   stability, transparency, convenience in sw products has eroded.

16 Apr 2017

- https://www.nytimes.com/2017/04/14/technology/robert-taylor-innovator-who-shaped-modern-computing-dies-at-85.html?_r=0 
  Robert Taylor obit, also links to Alan Kay comment at HN etc.
  (in fallen heroes, links.html, 14 Apr 2017)
  See also "what made xerox parc special" 

- https://github.com/psenough/teach_yourself_demoscene_in_14_days

- https://github.com/jed/140bytes/wiki/Byte-saving-techniques

- Linus Akeson's 256 byte video+music demo for C64/6502
  (linked in both HN and MeFi)

13 Apr 2017

- JC Google+ digital humanities page

11 Apr 2017

- https://blog.acolyer.org/2017/03/page/3/ - Mar 2017 archive to "The Morning
  Paper" about a CS paper every weekday.  Links to archives for other months.

- SO post what-part-of-milner-hindley-do-you-not-understand

 8 Apr 2017

- http://ask.metafilter.com/307705/Tutorials-Algorithms-Software-for-Federated-Services#4452469
  Explanation of NNTP on AskMe, in response to question about Mastodon
 'federated' (distributed) Twitter-like social network.  See also
  https://robek.world/featured/what-is-gnu-social-and-is-mastodon-social-a-twitter-clone/
  https://motherboard.vice.com/en_us/article/mastodon-is-like-twitter-without-nazis-so-why-are-we-not-using-it
  https://github.com/tootsuite/mastodon
  https://github.com/tootsuite/mastodon/blob/master/docs/
  https://instances.mastodon.xyz/
  https://news.ycombinator.com/item?id=14050718 (comment on GNU Social/Mastodon
   in another thread)

 6 Apr 2017

- https://news.ycombinator.com/item?id=11803165 - Alan Kay and many contributors
   on books, reading etc. etc.

- Oscilloscope pong linked in HN from www.eevblog.com.  Amazing all
  discrete circuit, with zillions of transistors free hanging in air
  above a ground plane, hand-drawn circuit diagrams.

- Alan Kay's answer to What made Xerox PARC so special? on quora.com,
  linked to HN.

 3 Apr 2017

- bit-player.org/publications-by-brian-hayes - links to Brian Hayes' 
   stories in American Scientist, both HTML and pdf.  Treasure trove!

- https://archive.org/details/jot_0.53_ted_nelson,
  http://xanadu.com/jotinstructions.txt - Ted Nelson's Jot editor (1970-1, 1986)

- http://viewsourcecode.org/snaptoken/kilo/ - build your own text
   editor tutorial, uses antirez' kilo (github) see also openemacs (github).
  https://news.ycombinator.com/item?id=14046446 - big HN comment thread
   159 comments with lots more links to homemade editors, way too many to 
   link individually, many emacs-like.

 2 Apr 2017

- https://news.ycombinator.com/item?id=14012973 - Python testimonials

 1 Apr 2017

- https://www.reddit.com/r/Python/comments/62q2sm/python_helped_me_write_again/
   programmer with MS used Python to program voice recognition + pen plotter
    to write in his own handwriting!  Amazing! (in python/examples and typography, links.html, 18 Apr 2017)

31 Mar 2017

- HN comment ...id=13965793 about a test suite for
  https://hackage.haskell.org/package/acid-state: "turn arbitrary,
  serializable Haskell data structures into a sort of in-memory
  database that is persisted to disk by writing a log of the transactions
  applied to it."  "Use regular Haskell data structures as your database 
  and get stronger ACID guarantees than most RDBMS offer."
  Maybe add to other.md?

- jvns.ca/blog/2017/03/26/bash-quirks - nice brief summary of the
  basics.  Just text, no cartoons this time.
  (links.html, 21 Jul 2017)

- github.com/jgrassler/papercut  - NNTP server in pure Python

- brendaningram.com how-to-create-distraction-free-writing-environment-on-linux
 Actually, how to make a bootable linux on a USB stick. 
 He doesn't explain how to boot directly into vim session.
 Right, you start vim from bash.  He also has a quickie vim tutorial
 in another article.

- https://glitch.com - via Metafilter - site for live-coding/deploying your own 
  Javascript/node.js web site right in the browser.  "Hypercard for the web"
  see also .../about .../~html-starter  
  https://medium.com/glitch/welcome-to-glitch-fe161d0fc39b

26 Mar 2017

- https://github.com/riolet/pol - Python one-liners: Awk-like
  one-liners for python - pol stores stdin in the variable _
  (underscore) in the form of a list of lists.  You can see what's
  inside _ with: $ ls -lah | pol "map(print,_)" 
  ['total', '156K']
  ['drwxr-xr-x', '11', 'root', 'root', '4.0K', 'Aug', '2', '2016', '.'] 
   ... etc. for other directory lines ...  Neat idea - but the
  implementation is in C - using Python.h and Py_ fcns.  Oh, I see, in
  effect builds a whole Python that just reads and executes single
  line of Python code from command line, also pre-processes its stdin
  to list-of-lists.

- http://www.codersnotes.com/notes/a-constructive-look-at-templeos/
   Also add to TempleOS entry in precursors.md
   https://usesthis.com/interviews/terry.davis/ - The Setup interview 

25 Mar 2017

- http://cs.gmu.edu/~sean/lisp/LispTutorial.html - interesting side-by-side
  format, discusses debugger etc. HN at https://news.ycombinator.com/item?id=13948966

- http://www.codersnotes.com/notes/a-constructive-look-at-templeos/

- http://www.poster.pl/polish_poster_artists.html

23 Mar 2017

- editor performance comparison at github, linked from HN yesterday

- Nils Nillson's AI history pdf from Stanford

- Peter Smith's Teach Yourself Logic 2017 self-study guide pdf (also put on kindle)
  via www.logicmatters.net/tyl


20 Mar 2017

- HN comments on "How to pick a microcontroller" - difference between
   microcontroller (Arduino) and microcomputer (RPi).  "If you've never
   bought a microcontroller, buy an Arduino" "(beware GPIO) It's so much
   easier to accidentally fry a RasPi than an Arduino" "Bitbanging pwm
   from a raspberry pi is horribly inaccurate"

- HN comments on "Show HN: How to write a recursive descent parser"
  "nearly every *actually used* programming language parser is hand-rolled"
  Link to Lepl 5.1 Pythonic recursive descent parser - now discontinued
  and unsupported, at www.acooke.org/lepl/, also at code.google.com/archive/p/lepl
  Lepl is only one of many at Ned Batchelder's Python parsing page, which 
  was succeeded by github.com/webmaven/python-parsing-tools.  This last
  might go in language.md.


18 Mar 2017

- https://news.ycombinator.com/item?id=13900153 - recommendations for AI/ML books

- http://ai.stanford.edu/~nilsson/QAI/qai.pdf  Nils Nilsson's history of AI, 700 pages

- http://karlrosaen.com/ml/ recommended course of ML study, book and course recs

- ... RSNA article on AI/ML in medical imaging

- https://news.ycombinator.com/item?id=13898968 - "Virtual machine
  escape fetches $100k at Pwn2Own hacking contest" - refs to books
  courses etc. on security.  Comment: "As far as this hack goes,
  broken down into three separate pieces, the exploits should be
  understandable as being sandbox escapes, but for three different
  sandboxes (Browser, OS, VM)."

- http://www.sureshjoshi.com/embedded/how-to-pick-a-microcontroller/
   How to pick a microcontroller - for beginners

- https://news.ycombinator.com/item?id=13901752 - Hackintosh, recent

- https://github.com/tedunderwood/LIS590DSH/blob/master/syllabusv2.pdf
   syllabus for Data Science in the Humanities - the links in 
    syllabusv2.pdf don't work from when viewed on github, but they do work
    in the downloaded pdf file. 


13 Mar 2017

- http://gist.github.com/leegao/1073233 that's leegao/Rationale.md
  50-line Python micro-JIT demo for X86 - apparently generates 
  and runs x86 machine code - !?

- https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12
   also https://news.ycombinator.com/item?id=13847465
   summarized in https://news.ycombinator.com/item?id=13855749
  How to recover lost Python source code if it's still resident in-memory
  Uses gdb, pyrasite

- https://github.com/lmacken/pyrasite-gui - Pyrasite GUI, impressive
   like Mac process monitor but for the Python process including threads.


 8 Mar 2017

- http://selfie.cs.uni-salzburg.at/ also
  https://github.com/cksystemsteaching/selfie - Pedagogical VM +
  Compiler + ...


 7 Mar 2017

- "What do compilers do with CPython interpreter main loop?"
   Blog post linked on HN

- Atlas Obscura recent article on Japanese internment art

- https://github.com/benjamincrom/scrabble 
  Python Scrabble library recovers all game moves from just final
   board and scores Suprisingly small (<< 1000 lines in all)
   looks like good style, nicely named and formatted with *no* comments.


5 Mar 2017

- https://news.ycombinator.com/item?id=13794879 - thread on new C#
  hobby OS, compilers, GPUs, links to other C# OS.

- https://news.ycombinator.com/item?id=13797797 - thread on APL,
  compilers, GPUs.  Or maybe not - very esoteric and insiderish

- http://www.projectoberon.com/ new home page for recent Project Oberon -
   no HN thread, though.


3 Mar 2017

- HN post today on The Unix Hater's Handbook, including long,
  link-filled threads on alternative OS and alternative graphics (to X
  windows).


 1 Mar 2017

- eniacinaction.com, especially links in /the-book/supporting-technical-materials

- www.computerhistory.org/collections/oralhistories

- CLPython - active 2006, inactive since 2013 (meh - its abandoned)

- mathematical urban legends on math overflow (meh - a few are amusing)

- http://dev.stephendiehl.com/numpile/
  https://github.com/sdiehl/numpile - LLVM specializer for scientific
  Python code - very nice writeup nice contrast to tailbiter (below),
  which also starts with Python AST


27 Feb 2017

- https://github.com/larsbrinkhoff/emacs-history

- https://codewords.recurse.com/issues/seven/dragon-taming-with-tailbiter-a-bytecode-compiler - can combine with Alison Kapur's Byterun for a 
  self-hosting Python (subset) - in - Python

- tauthon, renamed unofficial "python2.8", python2.7 with python 3
  features backported

- Links to CPython and its standard library at Github.

25 Feb 2017

- http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html
   nice collection of convenient idioms
 HN comments https://news.ycombinator.com/item?id=7365410

21 Feb 2017

- http://ablagoev.github.io/linux/adventures/commands/2017/02/19/adventures-in-usr-bin.html
   lesser-known but useful unix/linux commands and utilities
   HN comments https://news.ycombinator.com/item?id=13682925
   HN comments specifically about editors, piping selected text through commands
    https://news.ycombinator.com/item?id=13684339

17 Feb 2017

- seen on HN, Mike Pall (of LuaJIT) on Reddit, recommended reading
  order for Lua C source. (links.html, 24 Feb 2017)

- www.collectorsweekly.com (in graphics/unusual media, links.html, 23 Feb 2017)

16 Feb 2017

- seen on HN, github repo with *transcript* of Rich Hickey's Simple Made Easy talk.
   same repo has other transcripts (links.html, 24 Feb 2017)

15 Feb 2017

- http://blog.presentandcorrect.com/category/books - 
   look for categories menu widget at the bottom of the page
   (in graphics/unusual media, links.html, 23 Feb 2017)

- That computing version of Brian Eno's oblique strategies, for programming/heuristics

- https://news.ycombinator.com/item?id=13590305 
  HN comment on Unix simplicity, just processes and file descriptors, along
   with riposte on how it's become so complicated (links.html, 24 Feb 2017)

- https://www.reddit.com/r/AskHistorians/

 9 Feb 2017

- http://code-poetry.com/ (in typography, links.html, 24 Feb 2017)

- https://github.com/ariestiyansyah/python-blogs - curated list of Python programming blogs


6 Feb 2017

- http://www.technoblogy.com/show?1KTO  Tiny Lisp Computer 2 PCP, Eagle files on github
  https://github.com/technoblogy/tiny-lisp-computer

- https://www.youtube.com/watch?v=vzPHdoOU8DQ - TTY I/O for Mark-8 microcomputer monitor,
   via http://www.rubyletter.com/newsletter/2017/02/03/terminal.html
   https://www.youtube.com/watch?v=qv5b1Xowxdk - Altair 8800 - Video #7.1 - Loading 4K BASIC with a Teletype and paper tape.


4 Feb 2017

- http://2x-1.net/ob/gray1/ also http://2x-1.net/ob/reginae-ex-machina/ 
  https://news.ycombinator.com/item?id=13559615 - CPU made entirely of ROM + RAM
   uses ROM as LUT and FlipFlops (with feedback).

3 Feb 2017

- https://news.ycombinator.com/item?id=13514057- old terminal/text
   user interfaces (TUI) often better than newer web and GUI.

- https://www.thegearpage.net/board/index.php?threads/the-amp-guts-appreciation-thread-part-2.918374/ photos of tube amp insides - showing construction techniques.


2 Feb 2017
 
- https://pdos.csail.mit.edu/6.828/2016/xv6/book-rev9.pdf
  (programming/design examples/unix, links.html, 24 Feb 2017)

31 Jan 2017

- https://news.ycombinator.com/item?id=13518170 Comments on "The Craft of Text Editing"
  with many links to more recent refs on editor implementation.

- https://news.ycombinator.com/item?id=13518800  Comments on "how to build a castle"
  including links to ongoing projects: http://burgbau.at/burgbaufrie/?page_id=428 (Austria)
   http://www.guedelon.fr/en/  (France)

- https://news.ycombinator.com/item?id=13513367  Comments on "what is the oldest computer
   program still in use?" 

- https://news.ycombinator.com/item?id=13507122 Comments on
  https://github.com/monostable/awesome-electronics, with many more links.

- https://news.ycombinator.com/item?id=13530657 Comments on "Bring back the dumb phone",
   advice on configuring/using smart phones to minimize distraction.

- https://github.com/vkazanov/elfuse - FUSE system in emacs lisp
  https://news.ycombinator.com/item?id=13529238 - comments on above, commenter
   recalls AmigaOS FrexxEd editor "that makes all open buffers accessible as a file system"
   Sounds similar to Plan 9 Acme.


30 Jan 2017

- https://news.ycombinator.com/item?id=13520891 Ask HN on programmers' blogs
  Maybe add after my own list in programming/buzz, also copy obscure programmers'
  blogs HN posts from geek culture.


29 Jan 2017

- http://www.dourish.com/goodies/jargon.html - HTML version of old pre-ESR Jargon file

- https://news.ycombinator.com/item?id=13514918 - HN comments on ITS git repo

- http://jonatron.me/ - RPi PDP11 simulator including front panel


27 Jan 2017

- https://news.ycombinator.com/item?id=13498365 thread on RS232 and ASCII,
  response to http://www.catb.org/esr/faqs/things-every-hacker-once-knew/
  more comments at https://lobste.rs/s/qph9hd/things_every_hacker_once_knew
  other extended responses at 
    https://utcc.utoronto.ca/~cks/space/blog/unix/CarriageReturnWhatFor
    https://utcc.utoronto.ca/~cks/space/blog/unix/HowUnixBackspaces
 more, with explanation and diagram of how it's handled in Linux:
  https://unix.stackexchange.com/questions/117981/what-are-the-responsibilities-of-each-pseudo-terminal-pty-component-software/120071#120071
 more on ascii (1-Feb-2017):
 https://garbagecollected.org/2017/01/31/four-column-ascii/
 https://news.ycombinator.com/item?id=13539552 HN comments on above, lots of links

24 Jan 2017

- http://ask.metafilter.com/305199/I-need-a-python-script-that-will-run-a-script
  First answer has several links on using Flask on RPi as a REST endpoint
  answerer recommends sending HTTP request to 2nd RPi that returns JSON response.
  Another answer recommends ssh on first RPi to run command on second RPi,
  possibly using paramiko.  Another answer recommends scp text file and use
  inotifywait - which waits for changes on a file. (links.html, 26 Jan 2016)

23 Jan 2017

- https://github.com/PDP-10/its - Incompatible Timesharing System, code and docs (links.html or maybe precursors.md, 26 Jan 2017)

22 Jan 2017

- http://oldblog.antirez.com/post/redis-persistence-demystified.html
  Very long post about persistence in various dbs, Unix file caching
  and writing, append only files (AOF) and how they relate do database
  snapshots .rdb files in Redis.

- http://everything2.com/title/Fast+6502+multiplication

- http://azer.bike/happy-hacking-linux/ - Arch-based distribution with
  tiling window manager (which one? - looks like xmonad).  This page
  includes window manager cheatsheet that summarizes basic key
  operations.  Nice simple web page design

21 Jan 2017

- http://gnuradio.org/blog/buffers/  GNU Radio Buffer architecture
  https://news.ycombinator.com/item?id=13406932 - more links and references

- https://github.com/lonetwin/pythonrc/ - "a python script intended to
  improve on the default Python interactive shell
  experience. ... Unlike ipython, bpython ...this is not ... used as a separate
  interactive environment. ...  a single file ... use it as any other
  rcfile."

- https://dlo.me/archives/2014/09/08/pythonrc/
  another pythonrc 

- https://pypi.python.org/pypi/blessings/ "a pythonic answer to
  curses" "A thin, practical wrapper around terminal coloring,
  styling, and positioning" (pypi page includes instructions)
  https://news.ycombinator.com/item?id=4399060
  http://pythonhosted.org/blessings/ (api doc)

- https://news.ycombinator.com/item?id=3965396 - unix-like-shells, pipes in Python

20 Jan 2017

- http://p.migdal.pl/2016/08/15/quantum-mechanics-for-high-school-students.html
  Links to course outlines (in Polish!) links to textbooks, online materials, osoftware

17 Jan 2017

- https://hackaday.io/project/19035-zerophone-a-raspberry-pi-smartphone/log/51839-project-description-and-frequently-asked-questions
  https://news.ycombinator.com/item?id=13398705

14 Jan 2017

- https://github.com/ChrisPenner/rasa  Rasa editor in Haskell
  detailed guide to the code: https://news.ycombinator.com/item?id=13395941
  (links.html, 17 Jan 2017)  

13 Jan 2017

- http://crna.cc/b/11 Blobless Linux on Raspberry Pi 
  Blog about https://github.com/christinaa/rpi-open-firmware
  HN comments at https://news.ycombinator.com/item?id=13396625
   including lots of complaints about RPi engineering besides blobs and openness (links.html, 16 Jan 2017)

10 Jan 2017

-  A multiple tab terminal emulator implemented in python 
   https://github.com/stonewell/pymterm
   https://news.ycombinator.com/item?id=13370486
   many dependencies, including paramiko (ssh) pygame kivy (ui)
   in fact it might be useful as guide for how to use the dependencies
   (utilities.md (?), 18 Jan 2017)

 9 Jan 2017

- Containers from Scratch (in great faiths/linux/containers, links.html, 17 Jan 2017)

- Ukelele tuner in Python, uses numpy, pyaudio (links.html, 26 Jan 2017)

- From Python to Numpy 

 7 Jan 2017

- A Minimal TTL Processor for Architecture Exploration
  http://www.bradrodriguez.com/papers/piscedu2.htm only
  "designed to achieve a maximum of functionality with a
  minimum of logic."  "Requiring only 22 standard TTL chips (excluding
  memory), it is well within the ability of a student to construct and
  understand." "fully static, it can be run at slow clock speeds or manually single-stepped"
     includes schematic but apparently never built?
also there is http://repository.cmu.edu/cgi/viewcontent.cgi?article=1595&context=compsci
     4-bit TTL processor for the classroom - with photo on solderless breadboard
     parts list but no schematic.


 6 Jan 2017

- jehanne.io JehanneOS Plan-9 distro in Plan-9

- marc.info/...9fans...   9fans mailing list archive in Plan-9

- MA single-window minimal acme clone in Tcl/Tk
  http://www.call-with-current-continuation.org/ma.tar.gz
  (in editors/acme, links.html, 17 Jan 2017)

- christinaa/LLVM-VideoCore4 + HN comments 
   via HN comments on Tourist Guide to LLVM from Reger's blog.
   (in RPi hacking, links.html, 16 Jan 2017)

- 9Fans post on Facebook done right, in Plan 9 style.
   (links.html, 16 Jan 2017)

- HiFive1 RISC-V Arduino-compatible dev kit - in HN and Hackaday.


 4 Jan 2017

- Leslie Lamport's annotated bibliography at
  http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html

- Portacle IDE for CL with SBCL, QuickLisp, Emacs with Slime, Magit
  (git inside emacs), and Company (text completions) all on a memory
  stick!

3 Jan 2017

- Eno-inspired Oblique Strategies for programing, linked from HN, also HN comments

- PLT MrEd as an OS paper in precursors.md

2 Jan 2017

- Rob Pike on C programming https://www.lysator.liu.se/c/pikestyle.html
  (is this the canonical link?)

- Summary of RISC-V assembly programming https://www.imperialviolet.org/2016/12/31/riscv.html

- RISC-V programming card http://www.cl.cam.ac.uk/teaching/1617/ECAD+Arch/files/docs/RISCVGreenCardv8-20151013.pdf

- vi-style editor in picolisp http://picolisp.com/wiki/?vip (links.html, 17 Jan 2017)

- advice on tech writing https://news.ycombinator.com/item?id=13301511

29 Dec 2016

- http://davidad.github.io/blog/2014/03/12/the-operating-system-is-out-of-date/  "I find that all the significant concepts in software systems were invented/discovered in  the 15 years between 1955 and 1970." add links to HN discussion:
   at https://news.ycombinator.com/item?id=13271220 
       https://news.ycombinator.com/item?id=7402571 (history, links.html, 31 Dec 2016)


27 Dec 2016

- http://www.maloryproject.com/about.php typography,
  http://dodecaglotta.com/ (in typography, links.html, 2 Jan 2017)

- Bringup history of Mac OS X (via HN) at www.pagetable.com (in great
  faiths/mac, links.html, 2 Jan 2017)

- https://github.com/haskus/haskus-system www.haskus.org www.vipervm.org
  "provide a full Haskell user-space environment on top of the Linux kernel"

- http://littleosbook.github.io/ and maybe HN discussion


26 Dec 2016

- https://zenhack.net/2016/12/25/why-python-is-not-my-favorite-language.html
  Why Python is not my favorite programming language (in Python
  assessment, links.html 2 Jan 2017)

- HN post on OLPC compared to RPi  https://news.ycombinator.com/item?id=13258261
  esp. View Source for any application and ad-hoc networking with wireless neighbors. (precursors.md, 31 Dec 2016)

- PicoLisp tutorial http://software-lab.de/doc/tut.html including built-in vi-like editor,
  ok tutorial https://github.com/JohnEarnest/ok with useful REPL commands
  (both in other.md 31 Dec 2016)

- netshade/apostasy.md https://gist.github.com/netshade/fda492cb780bae1190063c1ad41b334a
  on Macbook -> MS Surface + Linux in a VM  in Great Faiths/Windows


23 Dec 2016

- Apple ][ emulation on AVR microcontroller, seen on HN (links.html, 1 Jan 2017)

22 Dec 2016

- for Piety/doc/... : Googler, command line Google in Python, at github.

21 Dec 2016

- Recent HN Fortran links in language arcana

20 Dec 2016

- Aboriginal Linux "builds the smallest/simplest linux system capable
  of rebuilding itself from source code"
  landley.net/aboriginal/about.html and /history.html
  also landley/toybox, make Android self-hosting.
  He presented on podcast at linuxluddites.com - "Not all change is progress"
  Also github site, https://github.com/landley/aboriginal (links.html, 1 Jan 2017)

19 Dec 2016

- BrainF* for Dummies in what, computer architecure?
  http://blog.klipse.tech/brainfuck/2016/12/17/brainfuck.html

- ok (APL-like) https://github.com/JohnEarnest/ok (other.md, 31 Dec)

- Z acme-inspired editor in scala https://github.com/sandgorgon/z (links.html, 31 Dec)

- Berkeley eecs cs152/sp13 page with links to many pdf notes.

- chip8 simulator in CL, literate program. Oh, never mind, I had confused it with 
  BBC micro:bit but-- "CHIP-8 is
  an interpreted minimalist programming language that was designed by
  Joseph Weisbecker in the 1970s for use on the RCA COSMAC VIP
  computer. ..."  Still, it's a nice coding study.  Maybe in computer architecture?

- https://github.com/doorbell88/Aquarium - runs in mac terminal - maybe
  have a section in links.html or a Piety/doc/display.md for 
  terminal display hacks/demos to use/adapt as sample Piety applications
  Don't we already have Life Snakes Rogue-like ... also 
  candidates in other languages: sed Flappy bird clone, sed Tetris clone.

- youtube video, Monty Python for Pythonistas 

- software heritage

- theorem prover museum 

15 Dec 2016

- HN comment "Python has gotten hard to learn" (in Python assessment, links.html 2 Jan 2017)

- HN comment comparing GoboLinux and Nix in great faiths/linux/filesystems


14 Dec 2016

- Andrew Wiles interview in education, call out quotes on problem scale (vs 3rd grade) and getting stuck

- HN comments praising Lotus Notes (in Nostalgia, links.html 2 Jan 2017)

- code-poetry.com (links.html 23 Feb 2017)

- NLP in Python example, Pride and Prejudice, (in Python examples, links.html 2 Jan 2017)

- Scott Aaronson comic strip, "The Talk" satirizing woo about QM in physics/popular culture/humor

12 Dec 2016

- https://github.com/jmcgeheeiv/pyfakefs via HN 
  intended as mock for testing, but might actually serve as 
  Piety in-memory file system.
  (utilities.md 18 Jan 2017)

9 Dec 2016

- www.rle.mit.edu/rgallager/documents/BooleShannon.pdf - Claude
  Shannon's methods and accomplishments, lecture by Robert Gallager
  "Shannon's genius lay in finding the "right way", the "simple way"
  to look at everyday technical problems" "Searching for simplicity is
  really searching for intuitive understanding of a simplified version
  of the problem that doesn't ignore the underlying original issues"
  "Graduate students often mistake simplicity for triviality .. The
  misconception is that it takes the best students to solve the most
  complex problems.  Actually, it takes the best students to *find*
  the simplest open problems."

- For Piety precursors.md: Xerox Alto simulators, SALTO and Contralto 


8 Dec 2016

- Python 3 module of the week https://pymotw.com/3/


7 Dec 2016

- Andrew Wiles interview w/HN comments, also video documentary on FLT

- web page on Butterfield Pi theorem (dimensional analysis)


6 Dec 2016

- ed clone in Haskell via HN Actually Using ed post

- original ed-in-C from V6 Unix at tuhs.org via HN Actually Using ed post
  Oh, we already have this, but maybe revise explanation in following parens.

- Eli Benderski's blog, eli.thegreenplace.net/archives/all via HN post
  on readline.  Add a separate link on same line just for his Python category.
  (and maybe another for Programming, which does not overlap).

- CRSR blog, https://manignosis.crsr.net/archive.html via ed clone in Haskell.
  (He recommends The Programming Historian, mentioned above)


3 Dec 2016

- Terry Tao's career advice (links.html)


2 Dec 2016

- for presursors.md, Cosmos C# project - new links including YT in HN today.

- for links.html math/provers, The Incredible Proof Machine with links to other
   pedagogical provers.


1 Dec 2016

- For languages.md, Python PEP 523 on JIT for CPython etc, refs Pyjin
  (?) project.


29 Nov 2016

- Understanding Academic Medical Centers: Simone's Maxims from
  Clinical Cancer Research 1999, via HN, in science/milieu or maybe
  education/something.  Oh, on reading this is clearly about academic politics
  but not so great we should link to it..

- High-quality ramen recommendations from HN post in geek culture/food
  'Eating Ramen by Yourself'

- Butler Lampsons' 1993 "SE: what worked" article maybe with Dan Luu's
  20year followup, in design principles next to Lampson's hints for design.


16 Nov 2016

- For Piety precusors.md:
  notanos, Javascript desktop mentioned in this HN comment:
  https://news.ycombinator.com/item?id=12956841
  screenshot:  http://i.imgur.com/sPh0c6s.png
  older version: https://github.com/Lerc/notanos
